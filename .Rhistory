library(magrittr)
library(dplyr)
library(forecast)
# Training data set
sales_train <- read.csv("./Midterm/sales_train_v2.csv", header = T, stringsAsFactors = F)
# date in Date format
sales_train %<>% dplyr::mutate(Date = lubridate::parse_date_time(date,orders = "%d.%m.%Y"),
shop_id = as.factor(shop_id),
item_id = as.factor(item_id),
date_block_num = as.factor(date_block_num),
Month = lubridate::month(Date),
Year = lubridate::year(Date),
Qtr = lubridate::quarter(Date),
ID = seq(1:nrow(.))) %>%
dplyr::arrange(shop_id,item_id,Date)
# Training data set
sales_train <- zoo::zoo.read.csv("./Midterm/sales_train_v2.csv", header = T, stringsAsFactors = F)
# Training data set
sales_train <- zoo::read.csv.zoo("./Midterm/sales_train_v2.csv", header = T, stringsAsFactors = F)
g <- seq(min(sales_train$Date), max(sales_train$Date),by = "day")
head(g)
Ref <- data.frame(Date = seq(min(sales_train$Date), max(sales_train$Date),by = "day"))
test <- merge(Ref,sales_train,all.x = T)
View(test)
# Training data set
sales_train <- read.csv.zoo("./Midterm/sales_train_v2.csv", header = T, stringsAsFactors = F)
# date in Date format
sales_train %<>% dplyr::mutate(Date = lubridate::parse_date_time(date,orders = "%d.%m.%Y"),
shop_id = as.factor(shop_id),
item_id = as.factor(item_id),
date_block_num = as.factor(date_block_num),
Month = lubridate::month(Date),
Year = lubridate::year(Date),
Qtr = lubridate::quarter(Date),
ID = seq(1:nrow(.))) %>%
dplyr::arrange(shop_id,item_id,Date)
a <- c("P_Inj1_Mean", "sri", "Anu", "P_Inj2_max", "P_Max")
gsub(".*Inj*.Mean",a)
grep(".*Inj*.Mean"a)
grep(".*Inj.Mean"a)
grep(".*Inj*.Mean",a)
grep(".*Inj.Mean",a)
grep(".*Inj",a)
grep(".*Inj.*&.*Mean",a)
grep("Inj.*&.*Mean",a)
stringr::str_detect(a,".*Inj")
stringr::str_detect(a,".*Inj.*&.*Mean.*")
stringr::str_detect(a,".*Inj.*&.*Mean")
stringr::str_detect(a,".*Inj.*&.Mean")
stringr::str_detect(a,".*Inj.*&.*Mean")
stringr::str_detect(a,".*Inj.*Mean")
a
a <- c(a,"Summa_Inj2_Mean")
stringr::str_detect(a,".*Inj.*Mean")
stringr::str_detect(a,".*Inj")
stringr::str_detect(a,".*Inj",value = T)
grep(".*Inj.*Mean",a)
grep(".*Inj.*Mean",a,value = T)
install.packages("format.R")
install.packages("formatR")
snowfall <- readxl::read_xls("./annual-snowfall-in-buffalo-191001.xls")
snowfall <- readxl::read_xls("annual-snowfall-in-buffalo-191001.xls")
snowfall <- readxl::read_xls("annual-snowfall-in-buffalo-19101.xls")
View(snowfall)
snowfall <- readxl::read_xls("annual-snowfall-in-buffalo-19101.xls",skip = 13)
View(snowfall)
snowfall <- readxl::read_xls("annual-snowfall-in-buffalo-19101.xls",skip = 13,col_names = F)
View(snowfall)
snowfall <- ts(data = snowfall$X__2,start = ("1910-01"),frequency = 1)
snowfall <- ts(data = snowfall$X__2,start = (1910,1),frequency = 1)
snowfall <- ts(data = snowfall$X__2,start = c(1910,1),frequency = 1)
snowfall
plot(snowfall)
snowfall <- readxl::read_xls("annual-snowfall-in-buffalo-19101.xls",skip = 13,col_names = F)
snowfallts <- ts(data = snowfall$X__2,start = c(1910,1),frequency = 1)
plot(snowfallts)
library(ggplot2)
ggplot(data = snowfall,x = x__1, y = x__2 ) + geom_point() + geom_smooth()
ggplot(data = snowfall,mapping = aes(x = x__1, y = x__2 )) + geom_point() + geom_smooth()
ggplot(data = snowfall,mapping = aes(x = X__1, y = X__2 )) + geom_point() + geom_smooth()
knitr::opts_chunk$set(echo = F)
library(magrittr)
library(dplyr)
library(fpp)
library(forecast)
library(fma)
data(package = 'fma',dole)
plot(dole, main = "Total people on unemployment benefits in Australia", ylab = "Number of people")
data("usdeaths")
par(mfrow = c(3,1))
plot(usdeaths, type = "b",main = " Monthly accidental deaths", ylab = "")
grid(nx = NULL, ny = 72/12, col = "lightgray", lty = "dotted",
lwd = par("lwd"), equilogs = TRUE)
plot(usdeaths/monthdays(usdeaths), type = "b",main = "Avg accidental deaths per day", ylab ="")
grid(nx = NULL, ny = 72/12, col = "lightgray", lty = "dotted",
lwd = par("lwd"), equilogs = TRUE)
usdeaths.lambda <- BoxCox.lambda(usdeaths/monthdays(usdeaths))
plot(BoxCox(usdeaths/monthdays(usdeaths),usdeaths.lambda), type = "b", main = "Avg accidental deaths per day (Transformed)",cex.lab = 0.4, ylab ="")
grid(nx = NULL, ny = 72/12, col = "lightgray", lty = "dotted",
lwd = par("lwd"), equilogs = TRUE)
data("bricksq")
par(mfrow = c(2,1))
plot(bricksq,main = "Quarterly production of bricks (in millions) at Portland, Australia",cex.main = 1,ylab ="")
grid(ny = NULL, nx = 156/4, col = "lightgray", lty = "dotted",
lwd = par("lwd"), equilogs = TRUE)
bricksq.lambda <- BoxCox.lambda(bricksq)
transformedBricksq <- BoxCox(bricksq,bricksq.lambda)
plot(transformedBricksq, main = "Transformed Quarterly production of bricks at Portland, Australia",cex.main = 1, ylab ="")
grid(ny = NULL, nx = 156/4, col = "lightgray", lty = "dotted",
lwd = par("lwd"), equilogs = TRUE)
data("dowjones")
slope <- (dowjones[78] - dowjones[1])/length(dowjones - 1)
y <- dowjones[1] + seq(1:78)*slope
driftmeth <- forecast::rwf(dowjones, h = 10, drift = T)
meanmethod <- forecast::meanf(dowjones,h=10)
naivemethod <- forecast::naive(dowjones,h =10)
seasonnaivemethod <- forecast::snaive(dowjones,h = 10)
plot(dowjones,xlim = c(1,88), ylab = "index", main = "Dow Jones industrial average")
lines(driftmeth$mean, col = "blue")
lines(y,col = "grey",lty =2)
lines(naivemethod$mean, col = "red")
lines(meanmethod$mean, col = "grey")
#lines(seasonnaivemethod$mean, col = "green")
legend("bottomright", legend = c("Mean method", "Naive method", "Drift method", "first-last point line"), col = c("grey","red","blue", "grey"), lty = c(1,1,1,2), cex = 0.5)
grid(nx = 6)
knitr::kable(data.frame(Time = 79:88, index = driftmeth$mean), caption = "Drift method forecast for 10 periods" )
Metrics <- rbind.data.frame(Drift = accuracy(driftmeth), Mean = accuracy(meanmethod),Naive = accuracy(naivemethod), SeasonalNaive = accuracy(seasonnaivemethod))
knitr::kable(round(Metrics,3), caption = "Accuracy metrics of benchmark models")
par(mfrow = c(2,2))
Acf(driftmeth$residuals, main = "Drift Method residuals",cex.main = 0.6)
Acf(naivemethod$residuals, main = "Naive method residuals", cex.main = 0.5)
Acf(seasonnaivemethod$residuals, main = "Seasonal Naive residuals",cex.main = 0.5)
Acf(meanmethod$residuals, main = "Mean method residuals", cex.main = 0.5)
par(mfrow = c(2,2))
stats::qqnorm(as.numeric(driftmeth$residuals), type = "p",main = "Drift method residuals")
qqline(as.numeric(driftmeth$residuals), col = "red")
stats::qqnorm(as.numeric(naivemethod$residuals), type = "p", main = "Naive method residuals")
qqline(as.numeric(naivemethod$residuals), col = "red")
stats::qqnorm(as.numeric(seasonnaivemethod$residuals), type = "p", main = "Seasonal Naive method residuals")
qqline(as.numeric(seasonnaivemethod$residuals), col = "red")
stats::qqnorm(as.numeric(meanmethod$residuals), type = "p", main = "Mean method residuals")
qqline(as.numeric(meanmethod$residuals), col = "red")
data("ibmclose")
layout(matrix(c(1,1,2),nrow = 1,ncol =3))
plot(ibmclose,ylab = "Stock Price", main = "Time series of IBM closing stock price")
hist(ibmclose,col = "grey")
train <- ts(ibmclose[1:300])
test <- ts(ibmclose[-1:-300],start = 301, end = 369)
#plot(train, ylab = "Stock Price", main = "IBM closing stock price \n Training set")
drift.fit <- rwf(y = train,drift = T,h =1)
#plot(drift.fit)
mean.fit <- meanf(train,h = 1)
naive.fit <- naive(train,h=1)
knitr::kable(rbind.data.frame(Drift = round(accuracy(drift.fit),2),Naive = round(accuracy(naive.fit),2), Mean = round(accuracy(mean.fit),2)),caption = "Forecast Accuracy")
par(mar=c(2.5,2.5,1,1))
layout(matrix(c(1,2,3,4,1,5,3,6),ncol=2),heights = c(1,3,1,3))
plot.new()
text(0.5,0.5,"Drift Residuals",cex = 1)
hist(drift.fit$residuals, xlab = "Drift residuals", main = "")
plot.new()
text(0.5,0.5,"Naive Residuals",cex = 1)
hist(naive.fit$residuals, xlab = "Naive residuals", main ="")
Acf(drift.fit$residuals, main = "")
Acf(naive.fit$residuals, main = "")
naive.generatedForecasts <- ts(sapply(1:69,function(x) naive(ibmclose[1:300+x-1], h = 1)$mean),start = 301,end = 369)
drift.generatedForecasts <- ts(sapply(1:69,function(x) rwf(ibmclose[1:300+x-1], h = 1,drift = TRUE)$mean),start = 301,end = 369)
layout(matrix(c(1,1,2,3),byrow = T, ncol =2),heights = c(3,2.5))
plot(ibmclose,col="grey",panel.first = grid(), main = "IBM Closing stock price")
lines(drift.generatedForecasts,col = "blue",lty=2)
lines(naive.generatedForecasts, col = "red",lty =3)
legend("topright", legend = c("Actual", "drift forecast", "naive forecast"),lty = c(1:3), col = c("grey","blue","red"),cex = 0.5)
plot(test - naive.generatedForecasts,ylab = "Forecast Error", main = "Naive forecast error",col = "grey")
plot(test - drift.generatedForecasts,ylab = "Forecast Error", main = "Drift forecast error", col ="grey")
par(mfrow = c(2,2))
plot(hsales)
mtext("Time series plot of single family home sales in the US",adj = -3,padj = 0.5,cex = 0.8,line = 1)
seasonplot(hsales,year.labels = T,col = 1:10,main = "")
monthplot(hsales)
salesperDay <- hsales/monthdays(hsales)
plot(salesperDay)
lambda <- BoxCox.lambda(salesperDay)
training.hsales <- window(hsales,start = 1973, end = 1993-0.01)
test.hsales <- window(hsales, start = 1994,frequency = 12)
naive.fit2 <- naive(training.hsales,h=1)
snaive.fit2 <- snaive(training.hsales,h=1)
drift.fit2 <- rwf(training.hsales,h = 1, drift = T)
knitr::kable(round(rbind.data.frame(Naive = accuracy(naive.fit2), SeasonalNaive = accuracy(snaive.fit2), Drift = accuracy(drift.fit2) ),2),caption = "Accuracy statistics on training data")
training.salesPerDay <- window(salesperDay, start = 1973,end = 1993-0.01)
naive.fit3 <- naive(training.salesPerDay,h=10)
snaive.fit3 <- snaive(training.salesPerDay)
drift.fit3 <- rwf(training.salesPerDay,h = 10, drift = T)
knitr::kable(round(rbind.data.frame(Naive = accuracy(naive.fit3),
Seasonal = accuracy(snaive.fit3),
Drift = accuracy(drift.fit3)),2),caption = "Accuracy statistics on Sales per data- training data")
training.salesPerDayTrans <- BoxCox(training.salesPerDay,BoxCox.lambda(training.salesPerDay))
naive.fit4 <- naive(training.salesPerDayTrans,h=10)
snaive.fit4 <- snaive(training.salesPerDayTrans)
drift.fit4 <- rwf(training.salesPerDayTrans,h = 10, drift = T)
knitr::kable(round(rbind.data.frame(Naive = accuracy(naive.fit4),
Seasonal = accuracy(snaive.fit4),
Drift = accuracy(drift.fit4)),2), caption = "Accuracy on Transformed training data")
Naive.test.forecast <- ts(sapply(1:23,function(x) naive(hsales[1:240+x-1], h = 1)$mean),start = 1994,frequency = 12)
Drift.test.forecast <- ts(sapply(1:23,function(x) rwf(hsales[1:240+x-1], h = 1,drift = T)$mean),start = 1994,frequency = 12)
knitr::kable(round(rbind.data.frame(Naive = accuracy(Naive.test.forecast, test.hsales),
Drift = accuracy(Drift.test.forecast, test.hsales)),2),
caption = "Forecast error on test data")
test.hsalesPerMonth <- test.hsales/monthdays(test.hsales)
test.hsalesPerMonth.Naive <- ts(sapply(1:23,function(x) naive(hsales/monthdays(hsales)[1:240+x-1], h = 1)$mean),start = 1994,frequency = 12)
test.hsalesPerMonth.Drift <- ts(sapply(1:23,function(x) rwf(hsales/monthdays(hsales)[1:240+x-1], h = 1,drift = T)$mean),start = 1994,frequency = 12)
knitr::kable(round(rbind.data.frame(Naive = accuracy(test.hsalesPerMonth.Naive,test.hsalesPerMonth),
Drift = accuracy(test.hsalesPerMonth.Drift,test.hsalesPerMonth)),2),
caption = "Forecast error on test data - Sales per day per month")
library(ggplot2)
ggplot(data = econsumption, mapping = aes(x= temp, y = Mwh)) + geom_point() + geom_smooth(method = "lm") +theme_bw()
lm.fit <- lm(Mwh ~ temp,data = econsumption)
summary(lm.fit)
par(mfrow = c(2,2))
plot(lm.fit)
forecast(lm.fit,newdata = data.frame(temp = c(10,35)))
data("olympic")
ggplot(data = olympic,mapping = aes(x = Year, y = time)) + geom_point() + geom_smooth(method = "lm") + theme_bw()
lmfit.oly <- lm(time ~ Year, data = olympic)
summary(lmfit.oly)
par(mfrow = c(2,2))
plot(lmfit.oly)
knitr::kable(data.frame(Year = seq(2000,2012,length.out = 4),Prediction =  predict(lmfit.oly,newdata = data.frame(Year = seq(2000,2012,length.out = 4))),Actuals = c(43.84,44,43.75,43.94)),caption = "Prediction of run times")
data("plastics")
plot(plastics)
DecomposeMulti <- decompose(plastics, type = "multiplicative")
plot(DecomposeMulti)
DecomposeMulti$seasonal
plot(DecomposeMulti$seasonal)
View(snaive.fit4)
DecomposeMulti$seasonal
DecomposeMulti$seasonal[1:12]
sum(DecomposeMulti$seasonal[1:12])
DecomposeMulti$trend
DecomposeMulti$trend*DecomposeMulti$seasonal*DecomposeMulti$random
plot(DecomposeMulti$trend*DecomposeMulti$seasonal*DecomposeMulti$random)
plot(plastics)
forecast::ets(snowfallts,model = "AAN")
AAN <- forecast::ets(snowfallts,model = "AAN")
MAN <- forecast::ets(snowfall, model = "MAN")
AAN <- forecast::ets(snowfallts,model = "AAN")
MAN <- forecast::ets(snowfallts, model = "MAN")
AAN
MAN
AAN <- forecast::ets(snowfallts,model = "AAN")
MAN <- forecast::ets(snowfallts, model = "MAN")
AAN.damp <- forecast::ets(snowfallts,model = "AAN", damped = T)
MAN.damp <- forecast::ets(snowfallts, model = "MAN",damped = T)
AAN
MAN
AAN.damp
MAN.damp
plot(AAN)
plot(forecast::ets(snowfallts,model = "ZZZ"))
AAN
MAN
AAN.damp
MAN.damp
ets.fit <- forecast::ets(snowfallts,model = "ZZZ")
ets.daped <- forecast::ets(snowfallts,model = "ZZZ",damped = T)
ets.fit
ets.damped
ets.damped <- forecast::ets(snowfallts,model = "ZZZ",damped = T)
ets.damped
ets.fit
ets.damped
plot(ets.fit)
accuracy(AAN,MAN,AAN.damp,MAN.damp,ets.fit,ets.damped)
forecast::accuracy(AAN,MAN,AAN.damp,MAN.damp,ets.fit,ets.damped)
forecast::accuracy(AAN,MAN)
forecast::accuracy(AAN)
Accuracy.df <- data.frame(AAN = accuracy(AAN), AAN.damp = forecast(AAN.damp),
MAN = accuracy(MAN), MAN.damp = forecast(MAN.damp),
MNN = accuracy(ets.fit), AAdN = forecast(ets.damped))
Accuracy.df
Accuracy.df <- data.frame(AAN.fit = accuracy(AAN), AAN.damp.fit = forecast(AAN.damp),
MAN.fit = accuracy(MAN), MAN.damp.fit = forecast(MAN.damp),
MNN.fit = accuracy(ets.fit), AAdN.fit = forecast(ets.damped))
Accuracy.df <- rbind(AAN.fit = accuracy(AAN), AAN.damp.fit = forecast(AAN.damp),
MAN.fit = accuracy(MAN), MAN.damp.fit = forecast(MAN.damp),
MNN.fit = accuracy(ets.fit), AAdN.fit = forecast(ets.damped))
Accuracy.df <- rbind.data.frame(AAN.fit = accuracy(AAN), AAN.damp.fit = forecast(AAN.damp),
MAN.fit = accuracy(MAN), MAN.damp.fit = forecast(MAN.damp),
MNN.fit = accuracy(ets.fit), AAdN.fit = forecast(ets.damped))
forecast(ets.damped)
Accuracy.df <- rbind.data.frame(AAN.fit = accuracy(AAN), AAN.damp.fit = accuracy(AAN.damp),
MAN.fit = accuracy(MAN), MAN.damp.fit = accuracy(MAN.damp),
MNN.fit = accuracy(ets.fit), AAdN.fit = accuracy(ets.damped))
Accuracy.df
autoplot(ets.fit)
df <- readr::read_csv(
'monthly-traffic-fatalities-in-on.csv',
col_names = c('mnth', 'fatalities'),
col_types = 'cn',
skip = 1
)
df <- df %>%
na.omit() %>%
tidyr::separate(mnth, c('year', 'mnth'), convert = T)
df
df <- readr::read_csv(
'monthly-traffic-fatalities-in-on.csv',
col_names = c('mnth', 'fatalities'),
col_types = 'cn',
skip = 1
)
df
df <- df %>%
na.omit() %>%
tidyr::separate(mnth, c('year', 'mnth'), convert = T)
df
tidyr::separate(df,mnmth,c('year', 'month'), sep = "-")
df <- readr::read_csv(
'monthly-traffic-fatalities-in-on.csv',
col_names = c('mnth', 'fatalities'),
col_types = 'cn',
skip = 1
)
tidyr::separate(df,mnmth,c('year', 'month'), sep = "-")
df
tidyr::separate(df,mnth,c('year', 'month'), sep = "-")
ft.ts <- ts(
data = df$fatalities,
start = c(df$year[1], df$mnth[1]),
frequency = 12
)
head(ft.ts, 24)
df <- df %>%
na.omit() %>%
tidyr::separate(mnth, c('year', 'mnth'), convert = T)
df
ft.ts <- ts(
data = df$fatalities,
start = c(df$year[1], df$mnth[1]),
frequency = 12
)
head(ft.ts, 24)
ggtsdisplay(ft.ts,
smooth = T,
lag.max = 20,
main = 'Monthly Traffic Fatalities in Ontario')
fit_ets <- function(ts, model_name) {
ts %>% ets(model = model_name)
}
forecast::checkresiduals(ets.damped)
post_process_ets <- function(ets, xlim = c(1970, 1976)) {
autoplot(ets, xlim = xlim)
checkresiduals(ets)
summary(ets)
}
model_table <- tibble(
model_name = c('ZZZ', 'AAA', 'ANN'),
model_descrip = c('Auto Select', 'Holt-Winters', 'Naive')) %>%
mutate(model = map(.x = model_name, ~ fit_ets(ft.ts, model_name = .x))) %>%
bind_cols(
map_df(.$model, ~sw_glance(.x))
) %>%
mutate(forecast = map(.x = model, .f = ~forecast(.x, h=12)))
model_table
library(purrr)
model_table <- tibble(
model_name = c('ZZZ', 'AAA', 'ANN'),
model_descrip = c('Auto Select', 'Holt-Winters', 'Naive')) %>%
mutate(model = map(.x = model_name, ~ fit_ets(ft.ts, model_name = .x))) %>%
bind_cols(
map_df(.$model, ~sw_glance(.x))
) %>%
mutate(forecast = map(.x = model, .f = ~forecast(.x, h=12)))
model_table
forecast()
install.packages("sweep")
sweep::sw_glance(ets.damped)
tibble(
model_name = c('ZZZ', 'AAA', 'ANN'),
model_descrip = c('Auto Select', 'Holt-Winters', 'Naive')) %>%
mutate(model = map(.x = model_name, ~ fit_ets(ft.ts, model_name = .x)))
tibble(
model_name = c('ZZZ', 'AAA', 'ANN'),
model_descrip = c('Auto Select', 'Holt-Winters', 'Naive')) %>%
mutate(model = map(.x = model_name, fit_ets(ft.ts, model_name = .x)))
model_table <- tibble(
model_name = c('ZZZ', 'AAA', 'ANN'),
model_descrip = c('Auto Select', 'Holt-Winters', 'Naive'))
purrr::map(.x = model_table$model_name,.f = fit_ets(ft.ts,.x))
purrr::map(.x = model_table$model_name,.f = fit_ets(list(ft.ts),.x))
purrr::map(.x = model_table$model_name,.f = fit_ets(ft.ts,.x))
tibble(
model_name = c('ZZZ', 'AAA', 'ANN'),
model_descrip = c('Auto Select', 'Holt-Winters', 'Naive')) %>%
mutate(model = map(.x = model_name, ~fit_ets(ft.ts, model_name = .x))) %>%
bind_cols(
map_df(.$model, ~sw_glance(.x))
)
library(sweep)
tibble(
model_name = c('ZZZ', 'AAA', 'ANN'),
model_descrip = c('Auto Select', 'Holt-Winters', 'Naive')) %>%
mutate(model = map(.x = model_name, ~fit_ets(ft.ts, model_name = .x))) %>%
bind_cols(
map_df(.$model, ~sw_glance(.x))
)
model_table <- tibble(
model_name = c('ZZZ', 'AAA', 'ANN'),
model_descrip = c('Auto Select', 'Holt-Winters', 'Naive')) %>%
mutate(model = map(.x = model_name, ~fit_ets(ft.ts, model_name = .x))) %>%
bind_cols(
map_df(.$model, ~sw_glance(.x))
)
model_table$model
tibble(
model_name = c('ZZZ', 'AAA', 'ANN'),
model_descrip = c('Auto Select', 'Holt-Winters', 'Naive')) %>%
mutate(model = map(.x = model_name, ~fit_ets(ft.ts, model_name = .x)))
tibble(
model_name = c('ZZZ', 'AAA', 'ANN'),
model_descrip = c('Auto Select', 'Holt-Winters', 'Naive')) %>%
mutate(model = map(.x = model_name, ~fit_ets(ft.ts, model_name = .x))) %>%
bind_cols(
map_df(.x = model, ~sw_glance(.x))
)
tibble(
model_name = c('ZZZ', 'AAA', 'ANN'),
model_descrip = c('Auto Select', 'Holt-Winters', 'Naive')) %>%
mutate(model = map(.x = model_name, ~fit_ets(ft.ts, model_name = .x)))
model_table <- tibble(
model_name = c('ZZZ', 'AAA', 'ANN'),
model_descrip = c('Auto Select', 'Holt-Winters', 'Naive')) %>%
mutate(model = map(.x = model_name, ~fit_ets(ft.ts, model_name = .x)))
model_table %>% map_df(.x = model, ~sw_glance(.x))
model_table$model
View(.Last.value)
tibble(
model_name = c('ZZZ', 'AAA', 'ANN'),
model_descrip = c('Auto Select', 'Holt-Winters', 'Naive')) %>%
mutate(model = map(.x = model_name, ~fit_ets(ft.ts, model_name = .x))) %>%
bind_cols(
map_df(.$model, ~sw_glance(.x))
)
tibble(
model_name = c('ZZZ', 'AAA', 'ANN'),
model_descrip = c('Auto Select', 'Holt-Winters', 'Naive')) %>%
mutate(model = map(.x = model_name, ~fit_ets(ft.ts, model_name = .x))) %>%
bind_cols(
map_df(.$model, ~sw_glance(.x))
) %>%
mutate(forecast = map(.x = .$model, .f = ~forecast(.x, h=12)))
model_table <- tibble(
model_name = c('ZZZ', 'AAA', 'ANN'),
model_descrip = c('Auto Select', 'Holt-Winters', 'Naive')) %>%
mutate(model = map(.x = model_name, ~fit_ets(ft.ts, model_name = .x))) %>%
bind_cols(
map_df(.$model, ~sw_glance(.x))
) %>%
mutate(forecast = map(.x = .$model, .f = ~forecast(.x, h=12)))
model_table
View(model_table)
model_table <- tibble(
model_name = c('ZZZ', 'AAA', 'ANN'),
model_descrip = c('Auto Select', 'Holt-Winters', 'Naive')) %>%
mutate(model = map(.x = model_name, ~fit_ets(ft.ts, model_name = .x))) %>%
bind_cols(
map_df(.$model, ~sw_glance(.x))
) %>%
mutate(forecast = map(.x = model, .f = ~forecast(.x, h=12)))
View(model_table)
model_table <- tibble(
model_name = c('ZZZ', 'AAA', 'ANN'),
model_descrip = c('Auto Select', 'Holt-Winters', 'Naive')) %>%
mutate(model = map(.x = model_name, ~fit_ets(ft.ts, model_name = .x))) %>%
bind_cols(
map_df(model, ~sw_glance(.x))
)
model_table <- tibble(
model_name = c('ZZZ', 'AAA', 'ANN'),
model_descrip = c('Auto Select', 'Holt-Winters', 'Naive')) %>%
mutate(model = map(.x = model_name, ~fit_ets(ft.ts, model_name = .x))) %>%
bind_cols(
map_df(.x = model, ~sw_glance(.x))
)
model_table <- tibble(
model_name = c('ZZZ', 'AAA', 'ANN'),
model_descrip = c('Auto Select', 'Holt-Winters', 'Naive')) %>%
mutate(model = map(.x = model_name, ~fit_ets(ft.ts, model_name = .x))) %>%
# bind_cols(
#   map_df(.x = model, ~sw_glance(.x))
# ) %>%
mutate(forecast = map(.x = model, .f = ~forecast(.x, h=12)))
forecast::Acf(sunspot.year)
forecast::Acf(sunspot.year,F)
test <- forecast::Acf(sunspot.year)
test
which.max(test[-1])
which.max(as.numeric(test[-1]))
class(test)
test$acf
which.max(as.numeric(test$acf[-1]))
which.max(as.numeric(abs(test$acf[-1])))+1
abs(test$acf)
autoplot(sunspot.year)
autoplot(sunspot.year)
autoplot(ets.fit)
autoplot(ets.fit(h=5))
autoplot(forecast.ets(ets.fit,h=5))
autoplot(forecast.ets(AAN,h=5))
autoplot(forecast.ets(AAN.damp,h=5))
autoplot(forecast(naive(snowfallts),h=5))
autoplot(forecast(snaive(snowfallts),h=5))
autoplot(forecast(snaive(snowfallts),h=10))
autoplot(holt(snowfallts))
