hsales
window(hsales, start = 1994,frequency = 12)
naive.fit2 <- naive(training.hsales,h=1)
snaive.fit2 <- snaive(training.hsales)
accuracy(naive.fit)
accuracy(snaive.fit2)
naive.fit2 <- naive(training.hsales,h=10)
accuracy(naive.fit2)
accuracy(snaive.fit2)
plot(naive.fit2)
plot(snaive.fit2)
drift.fit2 <- rwf(training.hsales,h = 10, drift = T)
accuracy(naive.fit2)
accuracy(snaive.fit2)
accuracy(drift.fit2)
training.salesPerDay <- window(salesperDay, start = 1973,end = 1993-0.01)
training.salesPerDay <- window(salesperDay, start = 1973,end = 1993-0.01)
naive.fit3 <- naive(training.salesPerDay,h=10)
snaive.fit3 <- snaive(training.salesPerDay)
drift.fit3 <- rwf(training.salesPerDay,h = 10, drift = T)
accuracy(naive.fit3)
accuracy(snaive.fit3)
accuracy(drift.fit3)
training.hsales <- window(hsales,start = 1973, end = 1993-0.01)
test.hsales <- window(hsales, start = 1994,frequency = 12)
naive.fit2 <- naive(training.hsales,h=10)
snaive.fit2 <- snaive(training.hsales)
drift.fit2 <- rwf(training.hsales,h = 10, drift = T)
plot(snaive.fit2)
accuracy(naive.fit2)
accuracy(snaive.fit2)
accuracy(drift.fit2)
training.salesPerDay <- window(salesperDay, start = 1973,end = 1993-0.01)
naive.fit3 <- naive(training.salesPerDay,h=10)
snaive.fit3 <- snaive(training.salesPerDay)
drift.fit3 <- rwf(training.salesPerDay,h = 10, drift = T)
accuracy(naive.fit3)
accuracy(snaive.fit3)
accuracy(drift.fit3)
training.salesPerDayTrans <- BoxCox(training.salesPerDay,BoxCox.lambda(training.salesPerDay))
training.hsales <- window(hsales,start = 1973, end = 1993-0.01)
test.hsales <- window(hsales, start = 1994,frequency = 12)
naive.fit2 <- naive(training.hsales,h=10)
snaive.fit2 <- snaive(training.hsales)
drift.fit2 <- rwf(training.hsales,h = 10, drift = T)
plot(snaive.fit2)
accuracy(naive.fit2)
accuracy(snaive.fit2)
accuracy(drift.fit2)
training.salesPerDay <- window(salesperDay, start = 1973,end = 1993-0.01)
naive.fit3 <- naive(training.salesPerDay,h=10)
snaive.fit3 <- snaive(training.salesPerDay)
drift.fit3 <- rwf(training.salesPerDay,h = 10, drift = T)
accuracy(naive.fit3)
accuracy(snaive.fit3)
accuracy(drift.fit3)
training.salesPerDayTrans <- BoxCox(training.salesPerDay,BoxCox.lambda(training.salesPerDay))
naive.fit4 <- naive(training.salesPerDayTrans,h=10)
snaive.fit4 <- snaive(training.salesPerDayTrans)
drift.fit4 <- rwf(training.salesPerDayTrans,h = 10, drift = T)
accuracy(naive.fit4)
accuracy(snaive.fit4)
accuracy(drift.fit4)
plot(drift.fit4)
accuracy(naive.fit4)
accuracy(snaive.fit4)
accuracy(drift.fit4)
plot(drift.fit4)
hist(naive.fit4$residuals)
hist(naive.fit4$residuals)
hist(snaive.fit4$residuals)
hist(driftfit4$residuals)
hist(naive.fit4$residuals)
hist(snaive.fit4$residuals)
hist(drift.fit4$residuals)
ts(sapply(1:23,function(x) naive(hsales[1:240+x-1], h = 1)$mean),start = 1994,frequency = 12)
plot(test.hsales - ts(sapply(1:23,function(x) naive(hsales[1:240+x-1], h = 1)$mean),start = 1994,frequency = 12))
plot(test.hsales - ts(sapply(1:23,function(x) snaive(hsales[1:240+x-1], h = 1)$mean),start = 1994,frequency = 12))
plot(test.hsales - ts(sapply(1:23,function(x) naive(hsales[1:240+x-1], h = 1)$mean),start = 1994,frequency = 12))
plot(test.hsales - ts(sapply(1:23,function(x) snaive(hsales[1:240+x-1], h = 1)$mean),start = 1994,frequency = 12))
plot(test.hsales - ts(sapply(1:23,function(x) rwf(hsales[1:240+x-1], h = 1,drift = T)$mean),start = 1994,frequency = 12))
plot(test.hsales - ts(sapply(1:23,function(x) naive(hsales[1:240+x-1], h = 1)$mean),start = 1994,frequency = 12))
plot(test.hsales - ts(sapply(1:23,function(x) rwf(hsales[1:240+x-1], h = 1,drift = T)$mean),start = 1994,frequency = 12))
ts(sapply(1:23,function(x) rwf(hsales[1:240+x-1], h = 1,drift = T)$mean),start = 1994,frequency = 12)
plot(test.hsales - ts(sapply(1:23,function(x) naive(hsales/monthdays(hsales)[1:240+x-1], h = 1)$mean),start = 1994,frequency = 12))
plot(test.hsales - ts(sapply(1:23,function(x) rwf(hsales/monthdays(hsales)[1:240+x-1], h = 1,drift = T)$mean),start = 1994,frequency = 12))
plot(test.hsales/monthdays(test.hsales) - ts(sapply(1:23,function(x) naive(hsales/monthdays(hsales)[1:240+x-1], h = 1)$mean),start = 1994,frequency = 12))
plot(test.hsales/monthdays(test.hsales) - ts(sapply(1:23,function(x) rwf(hsales/monthdays(hsales)[1:240+x-1], h = 1,drift = T)$mean),start = 1994,frequency = 12))
ts(sapply(1:23,function(x) naive(hsales/monthdays(hsales)[1:240+x-1], h = 1)$mean),start = 1994,frequency = 12)
test.hsales/monthdays(test.hsales)
plot(test.hsales/monthdays(test.hsales) - ts(sapply(1:23,function(x) naive(hsales/monthdays(hsales)[1:240+x-1], h = 1)$mean),start = 1994,frequency = 12))
plot(test.hsales/monthdays(test.hsales) - ts(sapply(1:23,function(x) rwf(hsales/monthdays(hsales)[1:240+x-1], h = 1,drift = T)$mean),start = 1994,frequency = 12))
accuracy(test.hsales/monthdays(test.hsales),ts(sapply(1:23,function(x) naive(hsales/monthdays(hsales)[1:240+x-1], h = 1)$mean),start = 1994,frequency = 12))
ts(sapply(1:23,function(x) naive(hsales/monthdays(hsales)[1:240+x-1], h = 1)$mean),start = 1994,frequency = 12)
ts(sapply(1:23,function(x) naive(hsales/monthdays(hsales)[1:240+x-1], h = 1)$mean),start = 1994,frequency = 12)
plot(test.hsales/monthdays(test.hsales) - ts(sapply(1:23,function(x) naive(hsales/monthdays(hsales)[1:240+x-1], h = 1)$mean),start = 1994,frequency = 12))
plot(test.hsales/monthdays(test.hsales) - ts(sapply(1:23,function(x) rwf(hsales/monthdays(hsales)[1:240+x-1], h = 1,drift = T)$mean),start = 1994,frequency = 12))
plot(test.hsales/monthdays(test.hsales) - ts(sapply(1:23,function(x) rwf(hsales/monthdays(hsales)[1:240+x-1], h = 1,drift = T)$mean),start = 1994,frequency = 11))
plot(test.hsales/monthdays(test.hsales) - ts(sapply(1:23,function(x) rwf(hsales/monthdays(hsales)[1:240+x-1], h = 1,drift = T)$mean),start = 1994,frequency = 12))
training.hsales <- window(hsales,start = 1973, end = 1993-0.01)
test.hsales <- window(hsales, start = 1994,frequency = 12)
naive.fit2 <- naive(training.hsales,h=10)
snaive.fit2 <- snaive(training.hsales)
drift.fit2 <- rwf(training.hsales,h = 10, drift = T)
plot(snaive.fit2)
accuracy(naive.fit2)
accuracy(snaive.fit2)
accuracy(drift.fit2)
training.salesPerDay <- window(salesperDay, start = 1973,end = 1993-0.01)
naive.fit3 <- naive(training.salesPerDay,h=10)
snaive.fit3 <- snaive(training.salesPerDay)
drift.fit3 <- rwf(training.salesPerDay,h = 10, drift = T)
accuracy(naive.fit3)
accuracy(snaive.fit3)
accuracy(drift.fit3)
training.salesPerDayTrans <- BoxCox(training.salesPerDay,BoxCox.lambda(training.salesPerDay))
naive.fit4 <- naive(training.salesPerDayTrans,h=10)
snaive.fit4 <- snaive(training.salesPerDayTrans)
drift.fit4 <- rwf(training.salesPerDayTrans,h = 10, drift = T)
plot(drift.fit4)
accuracy(naive.fit4)
accuracy(snaive.fit4)
accuracy(drift.fit4)
hist(naive.fit4$residuals)
hist(snaive.fit4$residuals)
hist(drift.fit4$residuals)
plot(test.hsales/monthdays(test.hsales) - ts(sapply(1:23,function(x) naive(hsales/monthdays(hsales)[1:240+x-1], h = 1)$mean),start = 1994,frequency = 12))
plot(test.hsales/monthdays(test.hsales) - ts(sapply(1:23,function(x) rwf(hsales/monthdays(hsales)[1:240+x-1], h = 1,drift = T)$mean),start = 1994,frequency = 12))
accuracy(test.hsales/monthdays(test.hsales),ts(sapply(1:23,function(x) naive(hsales/monthdays(hsales)[1:240+x-1], h = 1)$mean),start = 1994,frequency = 12))
ts(sapply(1:23,function(x) naive(hsales/monthdays(hsales)[1:240+x-1], h = 1)$mean),start = 1994,frequency = 12)
test.hsales
testing <- ts(sapply(1:23,function(x) naive(hsales/monthdays(hsales)[1:240+x-1], h = 1)$mean),start = 1994,frequency = 12)
testing
test.hsales
test.hsales/monthdays(test.hsales)
test.hsalesPerMonth <- test.hsales/monthdays(test.hsales)
test.hsalesPerMonth <- test.hsales/monthdays(test.hsales)
plot(test.hsalesPerMonth - ts(sapply(1:23,function(x) naive(hsales/monthdays(hsales)[1:240+x-1], h = 1)$mean),start = 1994,frequency = 12))
test.hsalesPerMonth.Naive <- ts(sapply(1:23,function(x) naive(hsales/monthdays(hsales)[1:240+x-1], h = 1)$mean),start = 1994,frequency = 12)
accuracy(test.hsalesPerMonth.Naive,test.hsalesPerMonth)
knitr::kable(rbind.data.frame(Naive = accuracy(naive.fit2), SeasonalNaive = accuracy(snaive.fit2), Drift = accuracy(drift.fit2) ))
knitr::kable(rbind.data.frame(Naive = accuracy(naive.fit3),
Seasonal = accuracy(snaive.fit3),
Drift = accuracy(drift.fit3)),caption = "Accuracy statistics on Sales per data- training data")
knitr::kable(round(rbind.data.frame(Naive = accuracy(naive.fit2), SeasonalNaive = accuracy(snaive.fit2), Drift = accuracy(drift.fit2) ),2),caption = "Accuracy statistics on training data")
knitr::kable(round(rbind.data.frame(Naive = accuracy(naive.fit3),
Seasonal = accuracy(snaive.fit3),
Drift = accuracy(drift.fit3)),2),caption = "Accuracy statistics on Sales per data- training data")
knitr::kable(round(rbind.data.frame(Naive = accuracy(naive.fit4),
Seasonal = accuracy(snaive.fit4),
Drift = accuracy(drift.fit4)),2), caption = "Accuracy on Transformed training data")
knitr::opts_chunk$set(echo = T)
library(magrittr)
library(dplyr)
library(fpp)
library(forecast)
library(fma)
rbind.data.frame(Naive = accuracy(Naive.test.forecast, test.hsales), Drift = accuracy(Drift.test.forecast, test.hsales))
Naive.test.forecast <- ts(sapply(1:23,function(x) naive(hsales[1:240+x-1], h = 1)$mean),start = 1994,frequency = 12)
Drift.test.forecast <- ts(sapply(1:23,function(x) rwf(hsales[1:240+x-1], h = 1,drift = T)$mean),start = 1994,frequency = 12)
rbind.data.frame(Naive = accuracy(Naive.test.forecast, test.hsales), Drift = accuracy(Drift.test.forecast, test.hsales))
knitr::kable(round(rbind.data.frame(Naive = accuracy(test.hsalesPerMonth.Naive,test.hsalesPerMonth),
Drift = accuracy(test.hsalesPerMonth.Drift,test.hsalesPerMonth)),2),
caption = "Forecast error on test data - Sales per day per month")
test.hsalesPerMonth <- test.hsales/monthdays(test.hsales)
test.hsalesPerMonth.Naive <- ts(sapply(1:23,function(x) naive(hsales/monthdays(hsales)[1:240+x-1], h = 1)$mean),start = 1994,frequency = 12)
test.hsalesPerMonth.Drift <- ts(sapply(1:23,function(x) rwf(hsales/monthdays(hsales)[1:240+x-1], h = 1,drift = T)$mean),start = 1994,frequency = 12)
knitr::kable(round(rbind.data.frame(Naive = accuracy(test.hsalesPerMonth.Naive,test.hsalesPerMonth),
Drift = accuracy(test.hsalesPerMonth.Drift,test.hsalesPerMonth)),2),
caption = "Forecast error on test data - Sales per day per month")
plot(Mwh ~ temp, data = econsumption)
library(ggplot2)
ggplot(data = econsumption, mapping = aes(x= temp, y = Mwh)) + geom_point() + geom_smooth(method = "lm")
lm.fit <- lm(Mwh ~ temp,data = econsumption)
plot(lm.fit)
hist(lm.fit)
hist(lm.fit$residuals)
plot(lm.fit)
library(ggplot2)
ggplot(data = econsumption, mapping = aes(x= temp, y = Mwh)) + geom_point() + geom_smooth(method = "lm")
lm.fit <- lm(Mwh ~ temp,data = econsumption)
plot(lm.fit)
library(ggplot2)
ggplot(data = econsumption, mapping = aes(x= temp, y = Mwh)) + geom_point() + geom_smooth(method = "lm")
lm.fit <- lm(Mwh ~ temp,data = econsumption)
par(mfrow = c(2,2))
plot(lm.fit)
forecast(lm.fit,newdata = data.frame(temp = c(10,35)))
library(ggplot2)
ggplot(data = econsumption, mapping = aes(x= temp, y = Mwh)) + geom_point() + geom_smooth(method = "lm")
lm.fit <- lm(Mwh ~ temp,data = econsumption)
par(mfrow = c(2,2))
plot(lm.fit)
forecast(lm.fit,newdata = data.frame(temp = c(10,35)))
boxplot(forecast(lm.fit,newdata = data.frame(temp = c(10,35))))
forecast(lm.fit,newdata = data.frame(temp = c(10,35)))
library(ggplot2)
ggplot(data = econsumption, mapping = aes(x= temp, y = Mwh)) + geom_point() + geom_smooth(method = "lm")
lm.fit <- lm(Mwh ~ temp,data = econsumption)
par(mfrow = c(2,2))
plot(lm.fit)
forecast(lm.fit,newdata = data.frame(temp = c(10,35)))
data("olympic")
head(olympic)
ggplot(data = olympic,mapping = aes(x - Year, y = time)) + geom_point() + geom_smooth(method = "lm")
data("olympic")
ggplot(data = olympic,mapping = aes(x - Year, y = time)) + geom_point() + geom_smooth(method = "lm")
View(olympic)
ggplot(data = olympic,mapping = aes(x = Year, y = time)) + geom_point() + geom_smooth(method = "lm")
lmfit.oly <- lm(time ~ Year, data = olympic)
ggplot(data = olympic,mapping = aes(x = Year, y = time)) + geom_point() + geom_smooth(method = lmfit.oly)
ggplot(data = olympic,mapping = aes(x = Year, y = time)) + geom_point() + stat_smooth(method = lmfit.oly)
ggplot(data = olympic,mapping = aes(x = Year, y = time)) + geom_point() + stat_smooth(lmfit.oly)
summary(lmfit.oly)
data("olympic")
lmfit.oly <- lm(time ~ Year, data = olympic)
summary(lmfit.oly)
ggplot(data = olympic,mapping = aes(x = Year, y = time)) + geom_point() + geom_smooth(method = "lm")
par(mfrow = c(2,2))
plot(lmfit.oly)
knitr::opts_chunk$set(echo = TRUE)
library(magrittr)
library(dplyr)
library(fpp)
library(forecast)
temperatures <- read.csv("mean-daily-temperature-fisher-ri.csv", header = T)
View(temperatures)
temperatures <- read.csv("mean-daily-temperature-fisher-ri.csv", header = T,sep = "?")
View(temperatures)
time <- as.Date(row.names(temperatures))
MeanDailyTemp <- ts(temperatures$Date.Mean.daily.temperature..Fisher.River.near.Dallas..Jan.01..1988.to.Dec.31..1991,frequency = 1,start = time[1])
head(MeanDailyTemp)
plot(MeanDailyTemp)
class(MeanDailyTemp)
MeanDailyTemp
temperatures <- read.csv("mean-daily-temperature-fisher-ri.csv", header = T)
View(temperatures)
gsub("?","",temperatures$Mean.daily.temperature..Fisher.River.near.Dallas..Jan.01..1988.to.Dec.31..1991)
stringr::str_replace(temperatures$Mean.daily.temperature..Fisher.River.near.Dallas..Jan.01..1988.to.Dec.31..1991,"?","")
stringr::str_replace(temperatures$Mean.daily.temperature..Fisher.River.near.Dallas..Jan.01..1988.to.Dec.31..1991,"?"," ")
gsub("?"," ",temperatures$Mean.daily.temperature..Fisher.River.near.Dallas..Jan.01..1988.to.Dec.31..1991)
temperatures <- temperatures$Mean.daily.temperature..Fisher.River.near.Dallas..Jan.01..1988.to.Dec.31..1991
temperatures <- read.csv("mean-daily-temperature-fisher-ri.csv", header = T)
temperatures <- temperatures$Mean.daily.temperature..Fisher.River.near.Dallas..Jan.01..1988.to.Dec.31..1991
temperatures
class(temperatures)
temperatures <- read.csv("mean-daily-temperature-fisher-ri.csv", header = T)
temperatures <- as.character(temperatures$Mean.daily.temperature..Fisher.River.near.Dallas..Jan.01..1988.to.Dec.31..1991)
gsub("?","",temperatures)
gsub("?%","",temperatures)
stringr::str_replace_all(temperatures,"?","")
stringr::str_replace_all(temperatures,"'?'","")
str_replace_all(temperatures, "[[:punct:]]", " ")
stringr::str_replace_all(temperatures, "[[:punct:]]", " ")
temperatures <- read.csv("mean-daily-temperature-fisher-ri.csv", header = T)
temperatures <- as.character(temperatures$Mean.daily.temperature..Fisher.River.near.Dallas..Jan.01..1988.to.Dec.31..1991)
temperatures <- as.numeric(stringr::str_replace_all(x, "[[:punct:]]", " "))
temperatures <- as.numeric(stringr::str_replace_all(temperatures, "[[:punct:]]", " "))
temperatures <- read.csv("mean-daily-temperature-fisher-ri.csv", header = T)
temperatures <- as.character(temperatures$Mean.daily.temperature..Fisher.River.near.Dallas..Jan.01..1988.to.Dec.31..1991)
temperatures <- as.numeric(stringr::str_replace_all(temperatures, "?", " "))
gsub("[^[:alnum:][:blank:]+?&/\\-]", "", temperatures)
gsub("[^[:alnum:][:blank:]+&/\\-]", "", temperatures)
gsub("[^[:alnum:][:blank:]+.&/\\-]", "", temperatures)
temperatures <- gsub("[^[:alnum:][:blank:]+.&/\\-]", "", temperatures)
temperatures <- as.numeric(gsub("[^[:alnum:][:blank:]+.&/\\-]", "", temperatures))
temperatures <- read.csv("mean-daily-temperature-fisher-ri.csv", header = T)
temperatures <- as.character(temperatures$Mean.daily.temperature..Fisher.River.near.Dallas..Jan.01..1988.to.Dec.31..1991)
temperatures <- gsub("[^[:alnum:][:blank:]+.&/\\-]", "", temperatures)
as.numeric(temperatures)
which(is.na(as.numeric(temperatures)))
temperatures[which(is.na(as.numeric(temperatures)))]
temperatures <- read.csv("mean-daily-temperature-fisher-ri.csv", header = T)
colnames(temperatures) <- c("Date", "MeanTemp")
temperatures <- as.character(temperatures$MeanTemp)
temperatures <- gsub("[^[:alnum:][:blank:]+.&/\\-]", "", temperatures)
temperatures <- as.numeric(stringr::str_replace_all(temperatures, "?", " "))
temperatures <- as.numeric(temperatures)
temperatures[which(is.na(as.numeric(temperatures)))]
temperatures <- read.csv("mean-daily-temperature-fisher-ri.csv", header = T)
colnames(temperatures) <- c("Date", "MeanTemp")
temperatures <- as.character(temperatures$MeanTemp)
temperatures <- gsub("[^[:alnum:][:blank:]+.&/\\-]", "", temperatures)
temperatures2 <- as.numeric(temperatures)
temperatures[which(is.na(as.numeric(temperatures2)))]
row.names(temperatures)
temperatures <- read.csv("mean-daily-temperature-fisher-ri.csv", header = T)
startTime <- as.Date(temperatures$Date[1])
colnames(temperatures) <- c("Date", "MeanTemp")
temperatures <- as.character(temperatures$MeanTemp)
temperatures <- gsub("[^[:alnum:][:blank:]+.&/\\-]", "", temperatures)
temperatures2 <- ts(as.numeric(temperatures), start = startTime, frequency = 1)
plot(temperatures2)
temperatures <- read.csv("mean-daily-temperature-fisher-ri.csv", header = T)
startTime <- as.Date(temperatures$Date[1])
colnames(temperatures) <- c("Date", "MeanTemp")
temperatures <- as.character(temperatures$MeanTemp)
temperatures <- gsub("[^[:alnum:][:blank:]+.&/\\-]", "", temperatures)
MeanDailyTemp <- ts(as.numeric(temperatures), start = startTime, frequency = 1)
plot(MeanDailyTemp)
plot(MeanDailyTemp)
MeanDailyTemp
mean(MeanDailyTemp)
MeanTemp <- readxl::read_xlsx("mean-daily-temperature-fisher-ri-2.xlsx")
View(MeanTemp)
Temperature <- ts(MeanTemp$Temp,start = MeanTemp$Time[1], frequency = 1)
Temperature <- ts(MeanTemp$Temp,start = as.numeric(MeanTemp$Time[1]), frequency = 1)
plot(Temperature)
plot(Temperature,col = "grey")
as.Date.numeric(MeanTemp$Time)
lubridate::decimal_date(MeanTemp$Time[1])
lubridate::decimal_date(MeanTemp$Time[2])
lubridate::decimal_date(MeanTemp$Time[3])
library(lubridate)
library(lubridate)
MeanTemp <- readxl::read_xlsx("mean-daily-temperature-fisher-ri-2.xlsx")
Temperature <- ts(MeanTemp$Temp,start = decimal_date(MeanTemp$Time[1])), frequency = 1)
library(lubridate)
MeanTemp <- readxl::read_xlsx("mean-daily-temperature-fisher-ri-2.xlsx")
Temperature <- ts(MeanTemp$Temp,start = decimal_date(MeanTemp$Time[1]), frequency = 1)
plot(Temperature,col = "grey")
Temperature
plot(Temperature[1:100])
plot(Temperature[1:100],type = "l")
plot(Temperature[1:120],type = "l")
plot(Temperature[1:240],type = "l")
plot(Temperature[1:300],type = "l")
plot(Temperature[1:350],type = "l")
plot(Temperature[1:360],type = "l")
plot(Temperature[1:370],type = "l")
plot(Temperature[1:380],type = "l")
plot(Temperature[1:400],type = "l")
plot(Temperature[1:420],type = "l")
plot(Temperature[1:520],type = "l")
plot(Temperature[1:720],type = "l")
library(lubridate)
MeanTemp <- readxl::read_xlsx("mean-daily-temperature-fisher-ri-2.xlsx")
Temperature <- ts(MeanTemp$Temp,start = decimal_date(MeanTemp$Time[1]), frequency = 1)
plot(Temperature,col = "grey")
# Zoomed version for a period of 2 years
plot(Temperature[1:720],type = "l",col = "grey")
View(MeanTemp)
library(lubridate)
MeanTemp <- readxl::read_xlsx("mean-daily-temperature-fisher-ri-2.xlsx")
Temperature <- ts(MeanTemp$Temp,start = decimal_date(MeanTemp$Time[1]), frequency = 365)
plot(Temperature,col = "grey")
# Zoomed version for a period of 2 years
plot(Temperature[1:720],type = "l",col = "grey")
Temperature
forecast::ggmonthplot(Temperature)
forecast::monthplot(Temperature)
forecast::monthplot(Temperature)
monthplot(Temperature)
seasonplot(Temperature)
seasonplot(Temperature,cex = 0.3)
seasonplot(Temperature,cex = 0.3,col = "grey")
plot(decompose(Temperature,type = additive))
plot(decompose(Temperature,type = "additive"))
library(lubridate)
MeanTemp <- readxl::read_xlsx("mean-daily-temperature-fisher-ri-2.xlsx")
Temperature <- ts(MeanTemp$Temp,start = decimal_date(MeanTemp$Time[1]), frequency = 365)
plot(Temperature,col = "grey")
seasonplot(Temperature,cex = 0.3,col = "grey")
plot(decompose(Temperature,type = "additive"))
plot(decompose(Temperature,type = "multiplicative"))
par(mfrow = c(1,2))
plot(decompose(Temperature,type = "additive"))
plot(decompose(Temperature,type = "multiplicative"))
par(mfrow = c(2,2))
plot(decompose(Temperature,type = "additive"))
plot(decompose(Temperature,type = "multiplicative"))
plot(decompose(Temperature,type = "additive"))
plot(decompose(Temperature,type = "multiplicative"))
stl.fit <- stl(x = Temperature,s.window = "periodic",t.window = 15,robust = T)
seasonallyAdj <- forecast::seasadj(stl.fit)
stl.fit <- stl(x = Temperature,s.window = "periodic",t.window = 15,robust = T)
seasonallyAdj <- forecast::seasadj(stl.fit)
plot(naive(seasonallyAdj))
plot(holt(seasonallyAdj))
plot(snaive(seasonallyAdj))
stl.fit <- stl(x = Temperature,s.window = "periodic",t.window = 30,robust = T)
seasonallyAdj <- forecast::seasadj(stl.fit)
plot(snaive(seasonallyAdj))
stl.fit <- stl(x = Temperature,s.window = "periodic",t.window = 30,robust = T)
seasonallyAdj <- forecast::seasadj(stl.fit)
plot(snaive(seasonallyAdj))
forecasts <- forcast(stl.fit,method = "snaive")
stl.fit <- stl(x = Temperature,s.window = "periodic",t.window = 30,robust = T)
seasonallyAdj <- forecast::seasadj(stl.fit)
plot(snaive(seasonallyAdj))
forecasts <- forecast(stl.fit,method = "snaive")
stl.fit <- stl(x = Temperature,s.window = "periodic",t.window = 30,robust = T)
seasonallyAdj <- forecast::seasadj(stl.fit)
plot(snaive(seasonallyAdj))
forecasts <- forecast::forecast(stl.fit,method = "snaive")
forecasts <- forecast::forecast(stl.fit)
plot(forecasts)
stl.fit$call
plot(stl.fit)
seasonal(stl.fit)
plot(seasonal(stl.fit))
plot(seasonal(stl.fit)+snaive(seasonallyAdj))
test <- seasonal(stl.fit)
test <- seasonal(stl.fit) + seasonallyAdj
plot(test)
test <- seasonal(stl.fit) + snaive(seasonallyAdj)
test <- seasonal(stl.fit) + as.numeric(snaive(seasonallyAdj))
test <- seasonal(stl.fit) + snaive(seasonallyAdj)$fitted
plot(test)
stl.fit <- stl(x = Temperature,s.window = "periodic",t.window = 30,robust = T)
seasonallyAdj <- forecast::seasadj(stl.fit)
plot(snaive(seasonallyAdj))
forecasts <- forecast::forecast(stl.fit)
plot(forecasts)
stl.fit <- stl(x = Temperature,s.window = "periodic",t.window = 30,robust = T)
plot(stl.fit)
seasonallyAdj <- forecast::seasadj(stl.fit)
plot(snaive(seasonallyAdj), main = "Seasonal Naive on the seasonally adjusted data")
forecasts <- forecast::forecast(stl.fit)
plot(forecasts)
seasonallyAdj <- forecast::seasadj(stl.fit)
plot(snaive(seasonallyAdj), main = "Seasonal Naive on the seasonally adjusted data")
forecasts <- forecast::forecast(stl.fit)
plot(forecasts)
stl.fit$time.series
seasonalData <- stl.fit$time.series[,1]
seasonalData
seasonalData <- snaive(stl.fit$time.series[,1])
fcts <- seasonallyAdjFit + seasonalDataFit
seasonallyAdj <- forecast::seasadj(stl.fit)
plot(snaive(seasonallyAdj), main = "Seasonal Naive on the seasonally adjusted data")
seasonalDataFit <- snaive(stl.fit$time.series[,1])
seasonallyAdjFit <- snaive(seasonallyAdj)
fcts <- seasonallyAdjFit + seasonalDataFit
seasonallyAdj <- forecast::seasadj(stl.fit)
plot(snaive(seasonallyAdj), main = "Seasonal Naive on the seasonally adjusted data")
seasonalDataFit <- snaive(stl.fit$time.series[,1])
seasonallyAdjFit <- snaive(seasonallyAdj)
fcts <- seasonallyAdjFit$fitted + seasonalDataFit$fitted
plot(fcts)
forecasts <- forecast::forecast(stl.fit)
plot(forecasts)
seasonallyAdj <- forecast::seasadj(stl.fit)
plot(snaive(seasonallyAdj), main = "Seasonal Naive on the seasonally adjusted data")
seasonalDataFit <- snaive(stl.fit$time.series[,1])
seasonallyAdjFit <- snaive(seasonallyAdj)
fcts <- seasonallyAdjFit$mean + seasonalDataFit$mean
plot(Temperature,col = "grey")
lines(fcts, col = "blue")
forecasts <- forecast::forecast(stl.fit)
plot(forecasts)
seasonallyAdj <- forecast::seasadj(stl.fit)
plot(snaive(seasonallyAdj), main = "Seasonal Naive on the seasonally adjusted data")
seasonalDataFit <- snaive(stl.fit$time.series[,1],h = 365)
seasonallyAdjFit <- snaive(seasonallyAdj, h= 365)
fcts <- seasonallyAdjFit$mean + seasonalDataFit$mean
plot(Temperature,col = "grey")
lines(fcts, col = "blue")
forecasts <- forecast::forecast(stl.fit)
plot(forecasts)
Temperature
plot(Temperature,col = "grey",xlim = c(1988,1993))
lines(fcts, col = "blue")
seasonallyAdj <- forecast::seasadj(stl.fit)
plot(snaive(seasonallyAdj), main = "Seasonal Naive on the seasonally adjusted data")
seasonalDataFit <- snaive(stl.fit$time.series[,1],h = 365)
seasonallyAdjFit <- snaive(seasonallyAdj, h= 365)
fcts <- seasonallyAdjFit$mean + seasonalDataFit$mean
plot(Temperature,col = "grey",xlim = c(1988,1993))
lines(fcts, col = "blue")
forecasts <- forecast::forecast(stl.fit)
plot(forecasts)
forecasts <- forecast::forecast(stl.fit)
plot(forecasts)
seasonallyAdj <- forecast::seasadj(stl.fit)
plot(snaive(seasonallyAdj), main = "Seasonal Naive on the seasonally adjusted data")
seasonalDataFit <- snaive(stl.fit$time.series[,1],h = 365)
seasonallyAdjFit <- snaive(seasonallyAdj, h= 365)
fcts <- seasonallyAdjFit$mean + seasonalDataFit$mean
plot(Temperature,col = "grey",xlim = c(1988,1994))
lines(fcts, col = "blue")
seasonallyAdj <- forecast::seasadj(stl.fit)
plot(snaive(seasonallyAdj), main = "Seasonal Naive on the seasonally adjusted data")
seasonalDataFit <- snaive(stl.fit$time.series[,1],h = 365*2)
seasonallyAdjFit <- snaive(seasonallyAdj, h= 365*2)
fcts <- seasonallyAdjFit$mean + seasonalDataFit$mean
plot(Temperature,col = "grey",xlim = c(1988,1994))
lines(fcts, col = "blue")
seasonallyAdj <- forecast::seasadj(stl.fit)
plot(snaive(seasonallyAdj), main = "Seasonal Naive on the seasonally adjusted data")
seasonalDataFit <- snaive(stl.fit$time.series[,1],h = 365*2)
seasonallyAdjFit <- snaive(seasonallyAdj, h= 365*2)
fcts <- seasonallyAdjFit$mean + seasonalDataFit$mean
plot(Temperature,col = "grey",xlim = c(1988,1994), main = "Forecast based on seasonal naive on de-seasonalized data")
lines(fcts, col = "blue")
legend("topright", legend = c("Actual", "Predicted"), col = c("grey", "blue"))
seasonallyAdj <- forecast::seasadj(stl.fit)
plot(snaive(seasonallyAdj), main = "Seasonal Naive on the seasonally adjusted data")
seasonalDataFit <- snaive(stl.fit$time.series[,1],h = 365*2)
seasonallyAdjFit <- snaive(seasonallyAdj, h= 365*2)
fcts <- seasonallyAdjFit$mean + seasonalDataFit$mean
plot(Temperature,col = "grey",xlim = c(1988,1994), main = "Forecast based on seasonal naive on de-seasonalized data")
lines(fcts, col = "blue")
legend("topright", legend = c("Actual", "Predicted"), col = c("grey", "blue"),cex = 0.5)
seasonallyAdj <- forecast::seasadj(stl.fit)
plot(snaive(seasonallyAdj), main = "Seasonal Naive on the seasonally adjusted data")
seasonalDataFit <- snaive(stl.fit$time.series[,1],h = 365*2)
seasonallyAdjFit <- snaive(seasonallyAdj, h= 365*2)
fcts <- seasonallyAdjFit$mean + seasonalDataFit$mean
plot(Temperature,col = "grey",xlim = c(1988,1994), main = "Forecast based on seasonal naive on de-seasonalized data")
lines(fcts, col = "blue")
legend("topright", legend = c("Actual", "Predicted"), col = c("grey", "blue"),cex = 0.5, lty = 1)
