Accuracy %>% ggplot() + geom_point(mapping = aes(x = alpha, y = beta, color = RMSE))
Accuracy %>% ggplot() + geom_point(mapping = aes(x = alpha, y= beta, color = RMSE))
Accuracy %>% ggplot() + geom_point(mapping = aes(x = alpha, y = beta, color = RMSE))
Accuracy %>% ggplot() + geom_point(mapping = aes(x = ~alpha, y = ~beta, color = ~RMSE))
Accuracy %>% ggplot() + geom_point(mapping = aes(x = ~alpha, y = ~beta))
Accuracy %>% ggplot(mapping = aes(x = alpha, y = beta))
Accuracy
Accuracy <- t(sapply(1:273, function(x) Results[[x]]$result))
Accuracy <- t(sapply(1:273, function(x) Results[[x]]$result))
Accuracy
as.data.frame(Accuracy)
unlist(Accuracy)
test <- unlist(Accuracy)
head(test)
Accuracy <- t(sapply(1:273, function(x) Results[[x]]$result))
View(Accuracy)
names(Accuracy)
Accuracy[[1]]
Accuracy[[2]]
Accuracy <- sapply(1:273, function(x) Results[[x]]$result)
View(Accuracy)
Accuracy
t(Accuracy)
as.data.frame.AsIs(t(Accuracy))
t(Accuracy)
View(.Last.value)
.Last.value[[2]][2]
t(Accuracy)[1,]
data.frame(t(Accuracy)[1,])
sapply(1:4368, function(x) data.frame(t(Accuracy)[x,]))
data.frame(t(Accuracy)[2,])
sapply(t(Accuracy), data.frame)
Accuracy <- t(Accuracy)
unlist(Accuracy)
head(Accuracy)
View(.Last.value)
Accuracy[1,]
unlist(Accuracy[1,])
data.frame(unlist(Accuracy[1,]))
Accuracy <- t(Accuracy)
data.frame(unlist(Accuracy[1,]))
data.frame(unlist(Accuracy[[1]]))
Accuracy <- t(Accuracy)
data.frame(unlist(Accuracy[1,]))
t(data.frame(unlist(Accuracy[1,])))
data.frame(t(unlist(Accuracy[1,])))
Accuracy <- apply(1:273, function(x) Results[[x]]$result)
Accuracy <- lapply(1:273, function(x) Results[[x]]$result)
View(Accuracy)
Accuracy[[1]]
Accuracy %>% rbind.data.frame()
names(Accuracy)
sapply(1:273,function(x) Accuracy[[x]])
purrr::flatten_df(Accuracy)
purrr::flatten_df(Accuracy[2])
library(purrr)
sapply(Accuracy, flatten_df)
do.call("flatten_df", Accuracy)
do.call("rbind", Accuracy)
Accuracy <- lapply(1:273, function(x) Results[[x]]$result)
do.call("rbind", Accuracy)
Accuracy <- do.call("rbind",Accuracy)
install.packages("data.table")
Accuracy %>% ggplot(aes(x = alpha, y = beta, z = RMSE)) + geom_contour()
Accuracy %>% ggplot(aes(x = alpha, y = beta, color = RMSE)) + geom_point()
Accuracy %>% ggplot(aes(x = alpha, y = beta, z = RMSE, facet = exponential, group = damped)) + geom_contour()
Accuracy %>% dplyr::filter(damped == F) %>%  ggplot(aes(x = alpha, y = beta, z = RMSE, facet = exponential) + geom_contour()
Accuracy %>% dplyr::filter(damped == F) %>%  ggplot(aes(x = alpha, y = beta, z = RMSE, facet = exponential)) + geom_contour()
Accuracy %>% dplyr::filter(damped == F) %>%  ggplot(data = .,aes(x = alpha, y = beta, z = RMSE, facet = exponential)) + geom_contour()
Accuracy %>% dplyr::filter(damped == F) %>%  ggplot(data = .,aes(x = alpha, y = beta, z = RMSE, facet = as.factor(exponential))) + geom_contour()
Accuracy %>% dplyr::filter(damped == F) %>%  ggplot(data = .,aes(x = alpha, y = beta, z = RMSE)) + geom_contour() + facet_wrap(~exponential)
Accuracy %>% dplyr::filter(damped == T) %>%  ggplot(data = .,aes(x = alpha, y = beta, z = RMSE)) + geom_contour() + facet_wrap(~exponential)
Accuracy %>% dplyr::filter(damped == F) %>%  ggplot(data = .,aes(x = alpha, y = beta, z = RMSE)) + geom_contour() + facet_wrap(~exponential)
Accuracy %>% dplyr::filter(damped == F) %>%  ggplot(data = .,aes(x = alpha, y = beta, z = RMSE)) + geom_contour(aes(color = ..level..)) + facet_wrap(~exponential)
Accuracy %>% dplyr::filter(damped == T) %>%  ggplot(data = .,aes(x = alpha, y = beta, z = RMSE)) + geom_contour(aes(color = ..level..)) + facet_wrap(~exponential)
eggs
plot(eggs)
Accuracy <- lapply(1:273, function(x) Results[[x]]$result)
purrr::reduce(.x = Accuracy, .f = bind_rows)
Accuracy %>% dplyr::filter(damped == T) %>%  ggplot(data = .,aes(x = alpha, y = beta, z = RMSE)) + geom_contour(aes(color = ..level..)) + facet_wrap(~exponential)
inputs <- expand.grid(alpha = seq(0.001, 0.5, length.out = 10),beta = seq(0.0001, 0.05, length.out = 10),exponential = c(T,F), damped = c(T,F))
holt(y = eggs, alpha = inputs$alpha[183], beta = inputs$beta[183], exponential = inputs$exponential[183], damped = inputs$damped[183])
inputs[183,]
holt(y = eggs, alpha = inputs$alpha[183], beta = inputs$beta[183], exponential = T, damped = F)
Accuracy %>% dplyr::filter(damped == T) %>%  ggplot(data = .,aes(x = alpha, y = beta, z = RMSE)) + geom_contour(aes(color = ..level..)) + facet_wrap(~exponential)
data("eggs")
inputs <- expand.grid(alpha = seq(0.001, 0.5, length.out = 10),beta = seq(0.0001, 0.05, length.out = 10),exponential = c(T,F), damped = c(T,F))
inputs %<>% dplyr::filter(alpha > beta)
holtfct <- function(alpha,beta, exponential, damped){
fcts <- holt(eggs,h= 100,alpha = alpha, beta = beta,exponential = exponential,damped = damped)
result <- fcts %>% .$model %>% sw_glance() %>%
dplyr::mutate(alpha = alpha, beta = beta,exponential = exponential, damped = damped )
list(result = result,model = fcts)
}
safe_holtfct <- purrr::safely(holtfct)
Results <- purrr::pmap(inputs,safe_holtfct)
# removing those inputs that error out
inputs <- inputs[which(sapply(1:364, function(x) is.null(Results[[x]]$error)) == T),]
# re do model fit
Results <- purrr::pmap(inputs,holtfct)
Accuracy <- lapply(1:273, function(x) Results[[x]]$result)
Accuracy <- do.call("rbind",Accuracy)
Accuracy %>% dplyr::filter(damped == T) %>%  ggplot(data = .,aes(x = alpha, y = beta, z = RMSE)) + geom_contour(aes(color = ..level..)) + facet_wrap(~exponential)
Reduce(f = sum,init = 0, x = 1:6)
Accuracy <- lapply(1:273, function(x) Results[[x]]$result)
Reduce(f = rbind.data.frame,init = 0, x = Accuracy)
Accuracy <- do.call("rbind",Accuracy)
Accuracy %>% dplyr::filter(damped == T) %>%  ggplot(data = .,aes(x = alpha, y = beta, z = RMSE)) + geom_contour(aes(color = ..level..)) + facet_wrap(~exponential)
Accuracy %>% dplyr::filter(damped == F) %>%  ggplot(data = .,aes(x = alpha, y = beta, z = RMSE)) + geom_contour(aes(color = ..level..)) + facet_wrap(~exponential)
Accuracy %>% dplyr::filter(damped == T) %>%  ggplot(data = .,aes(x = alpha, y = beta, z = RMSE)) + geom_contour(aes(color = ..level..)) + facet_wrap(~exponential)
Accuracy %>% dplyr::filter(damped == F) %>%  ggplot(data = .,aes(x = alpha, y = beta, z = RMSE)) + geom_contour(aes(color = ..level..)) + facet_wrap(~exponential)
Accuracy %>% dplyr::filter(damped == T) %>%  ggplot(data = .,aes(x = alpha, y = beta, z = RMSE)) + geom_contour(aes(color = ..level..)) + facet_wrap(~exponential)
Accuracy %>% dplyr::filter(damped == T) %>%  ggplot(data = .,aes(x = alpha, y = beta, z = RMSE)) + geom_contour() + scale_color_gradient(colors = rainbow(4))  +  facet_wrap(~exponential)
Accuracy %>% dplyr::filter(damped == T) %>%  ggplot(data = .,aes(x = alpha, y = beta, z = RMSE)) + geom_contour() + scale_color_gradient()  +  facet_wrap(~exponential)
Accuracy %>% dplyr::filter(damped == T) %>%  ggplot(data = .,aes(x = alpha, y = beta, z = RMSE)) + geom_contour(aes(color = .. level..)) + scale_color_gradient() +
Accuracy %>% dplyr::filter(damped == T) %>%  ggplot(data = .,aes(x = alpha, y = beta, z = RMSE)) + geom_contour(aes(color = ..level..)) + scale_color_gradient() +
facet_wrap(~exponential)
Accuracy %>% dplyr::filter(damped == T) %>%  ggplot(data = .,aes(x = alpha, y = beta, z = RMSE)) + geom_contour(aes(color = ..level..)) + scale_color_gradient(colours = rainbow(4)) +
facet_wrap(~exponential)
Accuracy %>% dplyr::filter(damped == T) %>%  ggplot(data = .,aes(x = alpha, y = beta, z = RMSE)) + geom_contour(aes(color = ..level..)) + scale_color_gradient() +
facet_wrap(~exponential)
Accuracy %>% dplyr::filter(damped == T) %>%  ggplot(data = .,aes(x = alpha, y = beta, z = RMSE)) + geom_contour(aes(color = ..level..)) + scale_color_gradient(ow='#E1FA72', high='#F46FEE') +
facet_wrap(~exponential)
Accuracy %>% dplyr::filter(damped == T) %>%  ggplot(data = .,aes(x = alpha, y = beta, z = RMSE)) + geom_contour(aes(color = ..level..)) + scale_color_gradient(low='#E1FA72', high='#F46FEE') +
facet_wrap(~exponential)
Accuracy %>% dplyr::filter(damped == T) %>%  ggplot(data = .,aes(x = alpha, y = beta, z = RMSE)) + geom_contour(aes(color = ..level..)) + scale_color_gradient(low="blue", high='red') +
facet_wrap(~exponential)
Accuracy %>% dplyr::filter(damped == F) %>%  ggplot(data = .,aes(x = alpha, y = beta, z = RMSE)) + geom_contour(aes(color = ..level..)) +  geom_contour(aes(color = ..level..)) + facet_wrap(~exponential)
Accuracy %>% dplyr::filter(damped == F) %>%  ggplot(data = .,aes(x = alpha, y = beta, z = RMSE)) + geom_contour(aes(color = ..level..)) +  scale_color_gradient(low="blue", high='red')+ facet_wrap(~exponential)
Accuracy %>% dplyr::filter(damped == T) %>%  ggplot(data = .,aes(x = alpha, y = beta, z = RMSE)) + geom_contour(aes(color = ..level..)) + scale_color_gradient(low="blue", high='red') +
facet_wrap(~exponential)
dampF <- Accuracy %>% dplyr::filter(damped == F) %>%  ggplot(data = .,aes(x = alpha, y = beta, z = RMSE)) + geom_contour(aes(color = ..level..)) +  scale_color_gradient(low="blue", high='red')+ facet_wrap(~exponential)
dampT <- Accuracy %>% dplyr::filter(damped == T) %>%  ggplot(data = .,aes(x = alpha, y = beta, z = RMSE)) + geom_contour(aes(color = ..level..)) + scale_color_gradient(low="blue", high='red') +
facet_wrap(~exponential)
gridExtra::arrangeGrob(dampF, dampT)
gridExtra::grid.arrange(.Last.value)
gridExtra::grid.arrange(dampT,dampF)
data("eggs")
inputs <- expand.grid(alpha = seq(0.001, 0.5, length.out = 10),beta = seq(0.0001, 0.05, length.out = 10),exponential = c(T,F), damped = c(T,F))
inputs %<>% dplyr::filter(alpha > beta)
holtfct <- function(alpha,beta, exponential, damped){
fcts <- holt(eggs,h= 100,alpha = alpha, beta = beta,exponential = exponential,damped = damped)
result <- fcts %>% .$model %>% sw_glance() %>%
dplyr::mutate(alpha = alpha, beta = beta,exponential = exponential, damped = damped )
list(result = result,model = fcts)
}
safe_holtfct <- purrr::safely(holtfct)
Results <- purrr::pmap(inputs,safe_holtfct)
# removing those inputs that error out
inputs <- inputs[which(sapply(1:364, function(x) is.null(Results[[x]]$error)) == T),]
# re do model fit
Results <- purrr::pmap(inputs,holtfct)
Accuracy <- lapply(1:273, function(x) Results[[x]]$result)
Accuracy <- do.call("rbind",Accuracy)
dampF <- Accuracy %>% dplyr::filter(damped == F) %>%  ggplot(data = .,aes(x = alpha, y = beta, z = RMSE)) + geom_contour(aes(color = ..level..)) +  scale_color_gradient(low="blue", high='red')+ facet_wrap(~exponential)
dampT <- Accuracy %>% dplyr::filter(damped == T) %>%  ggplot(data = .,aes(x = alpha, y = beta, z = RMSE)) + geom_contour(aes(color = ..level..)) + scale_color_gradient(low="blue", high='red') +
facet_wrap(~exponential)
gridExtra::grid.arrange(dampT,dampF)
Accuracy %>% which.min(RMSE)
which.min(Accuracy$RMSE)
View(Results)
Result$model[which.min(Accuracy$RMSE)]
Results$model[which.min(Accuracy$RMSE)]
Results[which.min(Accuracy$RMSE)]$model
Results[[which.min(Accuracy$RMSE)]]$model
plot(Results[[which.min(Accuracy$RMSE)]]$model)
plot(Results[[which.max(Accuracy$RMSE)]]$model)
plot(Results[[which.min(Accuracy$RMSE)]]$model)
plot(Results[[which.max(Accuracy$RMSE)]]$model)
plot(Results[[which.min(Accuracy$RMSE)]]$model, se = F)
plot(Results[[which.min(Accuracy$RMSE)]]$model, error = F)
plot(Results[[which.min(Accuracy$RMSE)]]$model,PI = F)
plot(Results[[which.min(Accuracy$RMSE)]]$model,PI = F)
lines(Results[[which.max(Accuracy$RMSE)]]$model, PI = F, col = "red")
plot(Results[[which.min(Accuracy$RMSE)]]$model,PI = F)
lines(Results[[which.max(Accuracy$RMSE)]]$model, PI = F, col = "red")
plot(Results[[which.min(Accuracy$RMSE)]]$model,PI = F)
plot(Results[[which.max(Accuracy$RMSE)]]$model, PI = F, col = "red")
inputs[which.min(Accuracy$RMSE,]
inputs[which.min(Accuracy$RMSE),]
paste(inputs[which.min(Accuracy$RMSE),], collapse = ",")
1e-04
1e-04 == 0.0001
inputs[which.max(Accuracy$RMSE),]
par(mfrow = c(2,1))
plot(Results[[which.min(Accuracy$RMSE)]]$model,PI = F, main = "Alpha = 0.5, Beta= 0.0001, Exponential = F, Damping = F")
plot(Results[[which.max(Accuracy$RMSE)]]$model, PI = F, col = "red", main = "Alpha = 0.06, Beta= 0.03, Exponential = F, Damping = F")
par(mfrow = c(2,1))
plot(Results[[which.min(Accuracy$RMSE)]]$model,PI = F, main = "Alpha = 0.5, Beta= 0.0001, Exponential = F, Damping = F", cex.main = 0.6)
plot(Results[[which.max(Accuracy$RMSE)]]$model, PI = F, col = "red", main = "Alpha = 0.06, Beta= 0.03, Exponential = F, Damping = F",cex.main = 6)
par(mfrow = c(2,1))
plot(Results[[which.min(Accuracy$RMSE)]]$model,PI = F, main = "Alpha = 0.5, Beta= 0.0001, Exponential = F, Damping = F", cex.main = 0.6)
plot(Results[[which.max(Accuracy$RMSE)]]$model, PI = F, col = "red", main = "Alpha = 0.06, Beta= 0.03, Exponential = F, Damping = F",cex.main = .6)
data("ukcars")
plot(ukcars)
ukcars
plot(ukcars)
seasonplot(ukcars)
stlfit <- stl(ukcars,s.window = "periodic", robust = T)
plot(stlfit)
stlfit$time.series
seasonal <- stlfit$time.series[,"seasonal"]
plot(seasonal)
seasonal <- stlfit$time.series[,"trend"]
plot(seasonal)
holt(seasonalAdj,h = 8,damped = T,exponential = F)
stlfit <- stl(ukcars,s.window = "periodic", robust = T)
plot(stlfit)
seasonalAdj <- stlfit$time.series[,"trend"]
plot(seasonalAdj)
holt(seasonalAdj,h = 8,damped = T,exponential = F)
holtfit <- holt(seasonalAdj,h = 8,damped = T,exponential = F)
holtfit$model
ets(y = seasonalAdj, model = "AAN", damped = T)
holtfit$model
ets(y = seasonalAdj, model = "AAN", damped = T)
plot(holtfit)
stlfit <- stl(ukcars,s.window = "periodic", robust = T, h = 8)
# reseasonalize
forecast(stlfit,h=8)
# reseasonalize
fit <- forecast(stlfit,h=8)
fit$model
# reseasonalize
seasoncomp <- stlfit$time.series[,"seasonal"]
plot(seasoncomp)
seasoncomp
holtfit
seasonal
seasonalAdj <- stlfit$time.series[,"trend"]
seasonalAdj2 <- seasadj(stlfit)
plot(seasonalAdj,seasonalAdj2)
plot(as.numeric(seasonalAdj),as.numeric(seasonalAdj2))
knitr::opts_chunk$set(echo = TRUE,message = F, warning = F)
library(magrittr)
library(dplyr)
library(fpp)
library(forecast)
stl.fit <- stl(x = Temperature,s.window = "periodic",t.window = 30,robust = T)
library(lubridate)
MeanTemp <- readxl::read_xlsx("mean-daily-temperature-fisher-ri-2.xlsx")
Temperature <- ts(MeanTemp$Temp,start = decimal_date(MeanTemp$Time[1]), frequency = 365)
plot(Temperature,col = "grey")
seasonplot(Temperature,cex = 0.3,col = "grey")
stl.fit <- stl(x = Temperature,s.window = "periodic",t.window = 30,robust = T)
plot(stl.fit)
seasonallyAdj <- forecast::seasadj(stl.fit)
plot(snaive(seasonallyAdj), main = "Seasonal Naive on the seasonally adjusted data")
seasonalAdj <- stlfit$time.series[,"seasonal"]
plot(as.numeric(seasonalAdj),as.numeric(seasonalAdj2))
plot(stlfit$time.series[,"seasonal"])
stlfit$time.series[,"seasonal"]
seasonalAdj <- stlfit$time.series[,"trend"]
seasonalAdj2 <- seasadj(stlfit)
plot(as.numeric(seasonalAdj),as.numeric(seasonalAdj2))
holtfit <- holt(seasonalAdj2,h = 8,damped = T,exponential = F)
plot(holtfit)
plot(seasonalAdj)
plot(seasonalAdj2)
plot(seasonalAdj)
plot(seasonalAdj2)
plot(stlfit)
seasonalAdj <- stlfit$time.series[,"trend"]
seasonalAdj2 <- seasadj(stlfit)
plot(as.numeric(seasonalAdj),as.numeric(seasonalAdj2))
plot(stlfit)
plot(seasonalcompfct)
seasonalcompfct <- snaive(seasoncomp, h= 8)
plot(seasonalcompfct)
plot(seasonalcompfct + holtfit)
plot((seasonalcompfct + holtfit))
plot(holtfit$mean + seasonalcompfct$mean)
seasonalcompfct
plot(holtfit$mean + seasonalcompfct$mean)
plot(seasonalcompfct$mean)
plot(holtfit$mean)
fcts <- holtfit$mean + seasonalcompfct$mean)
fcts <- holtfit$mean + seasonalcompfct$mean
plot(fcts)
c(ukcars,fcts)
plot(c(ukcars,fcts))
fcts
(ukcars
(ukcars
ukcars
ukcars
ts(c(ukcars,fcts),start = c(1977,4))
ukcars
ts(c(ukcars,fcts),start = c(1977,4))
ts(c(ukcars,fcts),start = c(1977,1), frequency = 4)
stlfit
summary(stlfit)
summary(holtfit)
stlfit <- stl(ukcars,s.window = "periodic", robust = T)
plot(stlfit)
seasonalAdj <- stlfit$time.series[,"trend"]
holtfit <- holt(seasonalAdj,h = 8,damped = T,exponential = F)
summary(holtfit)
plot(holtfit)
# reseasonalize
seasoncomp <- stlfit$time.series[,"seasonal"]
seasonalcompfct <- snaive(seasoncomp, h= 8)
fcts <- holtfit$mean + seasonalcompfct$mean
reseasonlizedts <- ts(c(ukcars,fcts),start = c(1977,1), frequency = 4)
autoplot(reasonlizedts)
autoplot(reseasonlizedts)
data.frame(data = reseasonlizedts, forecasted = forecasted)
forecasted <- c(rep(0,length(reseasonlizedts - 8)), rep(1,8))
data.frame(data = reseasonlizedts, forecasted = forecasted)
length(reseasonlizedts - 8)
forecasted <- c(rep(0,113), rep(1,8))
data.frame(data = reseasonlizedts, forecasted = forecasted)
autoplot(reseasonlizedts)
data.frame(data = reseasonlizedts, forecasted = forecasted) %>%
autoplot()
ukcars
seq(1977:2005, each = 4, length.out = 121)
plot(reseasonlizedts)
accuarcy(holtfit)
Accuarcy(holtfit)
accuracy(holtfit)
plot(holtfit)
plot(holtfit, ylab = "Seasonally adjusted data")
holtfit <- holt(seasonalAdj,h = 8,damped = T,exponential = F)
summary(holtfit)
plot(holtfit, ylab = "Seasonally adjusted data")
# reseasonalize
seasoncomp <- stlfit$time.series[,"seasonal"]
seasonalcompfct <- snaive(seasoncomp, h= 8)
fcts <- holtfit$mean + seasonalcompfct$mean
reseasonlizedts <- ts(c(ukcars,fcts),start = c(1977,1), frequency = 4)
plot(reseasonlizedts)
accuracy(holtfit)
plot(reseasonlizedts, col= c(rep(1,113),rep(2,8)))
plot(reseasonlizedts, col= c(rep("grey",113),rep("blue",8)))
ukcars
year <- c(seq(1977:2004, each = 4), rep(2005:2006, each = 4), 2007)
year <- c(rep(1977:2004, each = 4), rep(2005:2006, each = 4), 2007)
qtr <- c(rep(1:4,(2006-1977+1)),1)
data.frame(data = reseasonlizedts, year = year, qtr = qtr, year.qtr = year + qtr/10, forecast = c(rep(F,113),rep(T,8))) %>%
ggplot(aes(x = year.qtr, y = data, color = forecast)) + geom_line()
autoplot(reseasonlizedts, col= c(rep("grey",113),rep("blue",8)))
data.frame(data = reseasonlizedts, year = year, qtr = qtr, year.qtr = year + qtr/10, forecast = c(rep(F,113),rep(T,8))) %>%
autoplot(aes(x = year.qtr, y = data, color = forecast)) + geom_line()
data.frame(data = reseasonlizedts, year = year, qtr = qtr, year.qtr = year + qtr/10, forecast = c(rep(F,113),rep(T,8))) %>%
ggplot(aes(x = year.qtr, y = data, color = forecast)) + geom_line()
data.frame(data = reseasonlizedts, year = year, qtr = qtr, year.qtr = year + qtr/10, forecast = c(rep(F,113),rep(T,8))) %>%
ggplot(aes(x = year.qtr, y = data, color = forecast)) + geom_point()
data.frame(data = reseasonlizedts, year = year, qtr = qtr, year.qtr = year + qtr/10, forecast = c(rep(F,113),rep(T,8))) %>%
ggplot(aes(x = year.qtr, y = data, color = forecast)) + geom_point() + geom_line()
data.frame(data = reseasonlizedts, year = year, qtr = qtr, year.qtr = year + qtr/10, forecast = c(rep(F,113),rep(T,8))) %>%
ggplot(aes(x = year.qtr, y = data, color = forecast)) + geom_line()
# reseasonalize
seasoncomp <- stlfit$time.series[,"seasonal"]
seasonalcompfct <- snaive(seasoncomp, h= 8)
fcts <- holtfit$mean + seasonalcompfct$mean
reseasonlizedts <- ts(c(ukcars,fcts),start = c(1977,1), frequency = 4)
year <- c(rep(1977:2004, each = 4), rep(2005:2006, each = 4), 2007)
qtr <- c(rep(1:4,(2006-1977+1)),1)
data.frame(data = reseasonlizedts, year = year, qtr = qtr, year.qtr = year + qtr/10, forecast = c(rep(F,113),rep(T,8))) %>%
ggplot(aes(x = year.qtr, y = data, color = forecast)) + geom_line()
#autoplot(reseasonlizedts, col= c(rep("grey",113),rep("blue",8)))
accuracy(holtfit)
holtlinear <- holt(seasonalAdj,h = 8,damped = F,exponential = F)
holtlinear <- holt(seasonalAdj,h = 8,damped = F,exponential = F)
fcts <- holtfitlinear$mean + seasonalcompfct$mean
holtlinear <- holt(seasonalAdj,h = 8,damped = F,exponential = F)
fcts <- holtlinear$mean + seasonalcompfct$mean
reseasonlizedts <- ts(c(ukcars,fcts),start = c(1977,1), frequency = 4)
year <- c(rep(1977:2004, each = 4), rep(2005:2006, each = 4), 2007)
qtr <- c(rep(1:4,(2006-1977+1)),1)
data.frame(data = reseasonlizedts, year = year, qtr = qtr, year.qtr = year + qtr/10, forecast = c(rep(F,113),rep(T,8))) %>%
ggplot(aes(x = year.qtr, y = data, color = forecast)) + geom_line()
plot(holtlinear)
plot(holtfit)
accuracy(holtlinear)
ets.fit <- ets(ukcars, model = "ZZZ")
ets.fit
accuracy(ets.fit)
holtlinear$fitted + seasonalcompfct$fitted
ukcars - holtlinear$fitted + seasonalcompfct$fitted
ukcars - holtlinear$fitted + seasonalcompfct$fitted
(ukcars - holtlinear$fitted + seasonalcompfct$fitted)^2
sum((ukcars - holtlinear$fitted + seasonalcompfct$fitted)^2)
sqrt(sum((ukcars - holtlinear$fitted + seasonalcompfct$fitted)^2,na.rm = T))
sqrt(sum((ukcars - holtlinear$fitted + seasonalcompfct$fitted)^2,na.rm = T)/113)
ukcars - holtlinear$fitted + seasonalcompfct$fitted)^2
(ukcars - holtlinear$fitted + seasonalcompfct$fitted)^2
# reseasonalize
seasoncomp <- stlfit$time.series[,"seasonal"]
seasonalcompfct <- snaive(seasoncomp, h= 8)
fcts <- holtfit$mean + seasonalcompfct$mean
reseasonlizedts <- ts(c(ukcars,fcts),start = c(1977,1), frequency = 4)
year <- c(rep(1977:2004, each = 4), rep(2005:2006, each = 4), 2007)
qtr <- c(rep(1:4,(2006-1977+1)),1)
data.frame(data = reseasonlizedts, year = year, qtr = qtr, year.qtr = year + qtr/10, forecast = c(rep(F,113),rep(T,8))) %>%
ggplot(aes(x = year.qtr, y = data, color = forecast)) + geom_line()
#autoplot(reseasonlizedts, col= c(rep("grey",113),rep("blue",8)))
sqrt(sum((ukcars - holtfit$fitted + seasonalcompfct$fitted)^2,na.rm = T)/113)
accuracy(holtfit)
holtlinear <- holt(seasonalAdj,h = 8,damped = F,exponential = F)
fcts <- holtlinear$mean + seasonalcompfct$mean
reseasonlizedts <- ts(c(ukcars,fcts),start = c(1977,1), frequency = 4)
year <- c(rep(1977:2004, each = 4), rep(2005:2006, each = 4), 2007)
qtr <- c(rep(1:4,(2006-1977+1)),1)
data.frame(data = reseasonlizedts, year = year, qtr = qtr, year.qtr = year + qtr/10, forecast = c(rep(F,113),rep(T,8))) %>%
ggplot(aes(x = year.qtr, y = data, color = forecast)) + geom_line()
sqrt(sum((ukcars - holtlinear$fitted + seasonalcompfct$fitted)^2,na.rm = T)/113)
accuracy(holtlinear)
autoplot(ets.fit)
autoplot(stlfit)
accuracy(ets.fit)
autoplot(ets.fit)
plot(ets.fit)
plot(forecast(ets.fit, h = 8))
data("visitors")
autoplot(visitors)
visitors
data("visitors")
autoplot(visitors)
hw.m.fit <- hw(visitors,seasonal = "multiplicative")
plot(hw.m.fit)
hw.m.fit <- hw(visitors,seasonal = "multiplicative",h = 24)
plot(hw.m.fit)
plot(hw(y = visitors,seasonal = "multiplicative", exponential = T))
plot(hw(y = visitors,seasonal = "multiplicative", exponential = T, damped = T))
plot(hw(y = visitors,seasonal = "multiplicative", exponential = T))
plot(hw(y = visitors,seasonal = "multiplicative", exponential = T, damped = T))
plot(hw(y = visitors,seasonal = "multiplicative", exponential = F, damped = T))
plot(hw.m.fit)
plot(hw(y = visitors,seasonal = "multiplicative", exponential = T))
plot(hw(y = visitors,seasonal = "multiplicative", exponential = T, damped = T))
plot(hw(y = visitors,seasonal = "multiplicative", exponential = F, damped = T))
par(mfrow=c(2,2))
plot(hw.m.fit,cex.main = 0.7)
plot(hw(y = visitors,seasonal = "multiplicative", exponential = T),cex.main = 0.7)
plot(hw(y = visitors,seasonal = "multiplicative", exponential = T, damped = T),cex.main = 0.7)
plot(hw(y = visitors,seasonal = "multiplicative", exponential = F, damped = T),cex.main = 0.7)
Models <- list(hw.m.fit,hw(y = visitors,seasonal = "multiplicative", exponential = T),
hw(y = visitors,seasonal = "multiplicative", exponential = T, damped = T),
hw(y = visitors,seasonal = "multiplicative", exponential = F, damped = T))
purrr::map_df(Models, accuracy)
purrr::map_df(Models, ~accuracy)
purrr::map(Models, ~accuracy)
purrr::map(Models, accuracy)
do.call("rbind",purrr::map(Models, accuracy))
accuracy(hw.m.fit
)
Models <- list(hw.m.fit = hw.m.fit,hw.m.exp = hw(y = visitors,seasonal = "multiplicative", exponential = T),
hw.m.exp.damp = hw(y = visitors,seasonal = "multiplicative", exponential = T, damped = T),
hw.m.damp = hw(y = visitors,seasonal = "multiplicative", exponential = F, damped = T))
accuracy(hw.m.fit
)
purrr::map(Models, accuracy)
purrr::reduce(purrr::map(Models, accuracy),bind_rows)
purrr::map(Models, accuracy)
purrr::reduce(purrr::map(Models, accuracy),bind_rows)
purrr::reduce(purrr::map(Models, accuracy),~bind_rows)
purrr::reduce(purrr::map(Models, accuracy),bind_rows)
do.call("rbind",purrr::map(Models, accuracy))
purrr::reduce(purrr::map(Models,accuracy),bind_rows)
df <- do.call("rbind",purrr::map(Models, accuracy))
rownames(df) <- names(Models)
df
dflist <- purrr::map(Models, accuracy)
View(dflist)
purrr::reduce(dflist, rbind)
purrr::reduce(dflist, rbind.data.frame)
sw_glance(hw.m.fi])
sw_glance(hw.m.fit)
sw_glance(hw.m.fit$model)
df <- do.call("rbind",purrr::map(Models, ~sw_glance(.x$model)))
df
ets.additive <- ets(visitors,additive.only = T,lambda = BoxCox.lambda(visitors))
stl.decop <- stl(x = visitors,s.window = "periodic",robust = T)
stl.decop <- stl(x = BoxCox(visitors,BoxCox.lambda(visitors)),s.window = "periodic",robust = T)
ets.mdl <- ets(visitors)
ets.additive <- ets(visitors,additive.only = T,lambda = BoxCox.lambda(visitors))
snaive.mdl <- snaive(visitors,lambda = BoxCox.lambda(visitors))
stl.decop <- stl(x = BoxCox(visitors,BoxCox.lambda(visitors)),s.window = "periodic",robust = T)
ets.seasadj <- ets(stl.decop$time.series[,"trend"])
stl.ets <- ets.seasadj$fitted + stl.decop$time.series[,"seasonal"]
plot(stl.ets)
InvBoxCox(stl.ets)
InvBoxCox(stl.ets,BoxCox.lambda(visitors))
plot(InvBoxCox(stl.ets,BoxCox.lambda(visitors)))
stl.ets.res <- visitors - stl.ets.fitted
stl.ets.fitted <- InvBoxCox(stl.ets,BoxCox.lambda(visitors))
stl.ets.res <- visitors - stl.ets.fitted
checkresiduals(stl.ets.res)
stl.ets.res
checkresiduals(stl.ets.res)
mdls <- list(ets.mdl,ets.additive,snaive.mdl)
purrr::map(mdls,sw_glance)
sw_glance(ets.mdl)
sw_glance(ets.additive)
sw_glance(snaive.mdl)
sw_glance(snaive.mdl$model)
sw_glance(snaive.mdl$model)
sw_glance(snaive.mdl)
sw_glance(snaive.mdl$model)
nvfct <- forecast(snaive.mdl)
sw_glance(nvfct)
sw_glance(nvfct$model)
nvfct$model
mdls <- list(ets.mdl$,ets.additive)
mdls <- list(ets.mdl,ets.additive)
sw_glance(snaive.mdl$model)
purrr::map(mdls,sw_glance)
purrr::reduce(purrr::map(mdls,sw_glance),bind_rows)
purrr::reduce(purrr::map(mdls,sw_glance),bind_rows) %>% .$RMSE
purrr::reduce(purrr::map(mdls,sw_glance),bind_rows) %>% select(RMSE)
