lmfit.oly <- lm(time ~ Year, data = olympic)
summary(lmfit.oly)
par(mfrow = c(2,2))
plot(lmfit.oly)
knitr::kable(data.frame(Year = seq(2000,2012,length.out = 4),Prediction =  predict(lmfit.oly,newdata = data.frame(Year = seq(2000,2012,length.out = 4))),Actuals = c(43.84,44,43.75,43.94)),caption = "Prediction of run times")
# 2012 - 43.94
# 2008 - 43.75
# 2004 - 44
# 2000 - 43.84
data("plastics")
plastics
plot(plastics)
DecomposeMulti <- decompose(plastics, type = "multiplicative")
plot(DecomposeMulti)
seasadj(DecomposeMulti)
plot(seasadj(DecomposeMulti))
plastics
plastics.rev <- plastics
plastics
plastics.rev[59] <- plastics.rev[59] + 500
plot(plastics.rev)
plot(seasadj(DecomposeMulti))
plastics.rev <- plastics
plastics.rev[59] <- plastics.rev[59] + 500
plot(plastics)
grid(ny = NULL, nx = 60, col = "lightgray", lty = "dotted",
lwd = par("lwd"), equilogs = TRUE)
plastics
plot(plastics)
grid(ny = NULL, nx = 61, col = "lightgray", lty = "dotted",
lwd = par("lwd"), equilogs = TRUE)
plot(seasadj(DecomposeMulti))
plastics.rev <- plastics
plastics.rev[59] <- plastics.rev[59] + 500
plot(plastics.rev)
grid(ny = NULL, nx = 61, col = "lightgray", lty = "dotted",
lwd = par("lwd"), equilogs = TRUE)
plot(seasadj(DecomposeMulti))
plot(decompose(plastics.rev, type = "multiplicative"))
plastics.rev2 <- plastics
plastics.rev2[42] <- plastics.rev[42] + 500
plot(plastics.rev2)
plot(decompose(plastics.rev2, type = "multiplicative"))
plot(seasadj(DecomposeMulti))
plastics.rev <- plastics
plastics.rev[59] <- plastics.rev[59] + 500
plot(plastics.rev)
grid(ny = NULL, nx = 61, col = "lightgray", lty = "dotted",
lwd = par("lwd"), equilogs = TRUE)
plot(decompose(plastics.rev, type = "multiplicative"))
plastics.rev2 <- plastics
plastics.rev2[42] <- plastics.rev[42] + 500
plot(decompose(plastics.rev2, type = "multiplicative"))
knitr::opts_chunk$set(echo = T)
library(magrittr)
library(dplyr)
library(fpp)
library(forecast)
library(fma)
SeasonallyAdj <- seasadj(DecomposeMulti)
knitr::opts_chunk$set(echo = T)
library(magrittr)
library(dplyr)
library(fpp)
library(forecast)
library(fma)
data(package = 'fma',dole)
plot(dole, main = "Total people on unemployment benefits in Australia", ylab = "Number of people")
data("usdeaths")
par(mfrow = c(3,1))
plot(usdeaths, type = "b",main = " Monthly accidental deaths", ylab = "")
grid(nx = NULL, ny = 72/12, col = "lightgray", lty = "dotted",
lwd = par("lwd"), equilogs = TRUE)
plot(usdeaths/monthdays(usdeaths), type = "b",main = "Avg accidental deaths per day", ylab ="")
grid(nx = NULL, ny = 72/12, col = "lightgray", lty = "dotted",
lwd = par("lwd"), equilogs = TRUE)
usdeaths.lambda <- BoxCox.lambda(usdeaths/monthdays(usdeaths))
plot(BoxCox(usdeaths/monthdays(usdeaths),usdeaths.lambda), type = "b", main = "Avg accidental deaths per day (Transformed)",cex.lab = 0.4, ylab ="")
grid(nx = NULL, ny = 72/12, col = "lightgray", lty = "dotted",
lwd = par("lwd"), equilogs = TRUE)
data("bricksq")
par(mfrow = c(2,1))
plot(bricksq,main = "Quarterly production of bricks (in millions) at Portland, Australia",cex.main = 1,ylab ="")
grid(ny = NULL, nx = 156/4, col = "lightgray", lty = "dotted",
lwd = par("lwd"), equilogs = TRUE)
bricksq.lambda <- BoxCox.lambda(bricksq)
transformedBricksq <- BoxCox(bricksq,bricksq.lambda)
plot(transformedBricksq, main = "Transformed Quarterly production of bricks at Portland, Australia",cex.main = 1, ylab ="")
grid(ny = NULL, nx = 156/4, col = "lightgray", lty = "dotted",
lwd = par("lwd"), equilogs = TRUE)
data("dowjones")
slope <- (dowjones[78] - dowjones[1])/length(dowjones - 1)
y <- dowjones[1] + seq(1:78)*slope
driftmeth <- forecast::rwf(dowjones, h = 10, drift = T)
meanmethod <- forecast::meanf(dowjones,h=10)
naivemethod <- forecast::naive(dowjones,h =10)
seasonnaivemethod <- forecast::snaive(dowjones,h = 10)
plot(dowjones,xlim = c(1,88), ylab = "index", main = "Dow Jones industrial average")
lines(driftmeth$mean, col = "blue")
lines(y,col = "grey",lty =2)
lines(naivemethod$mean, col = "red")
lines(meanmethod$mean, col = "grey")
#lines(seasonnaivemethod$mean, col = "green")
legend("bottomright", legend = c("Mean method", "Naive method", "Drift method", "first-last point line"), col = c("grey","red","blue", "grey"), lty = c(1,1,1,2), cex = 0.5)
grid(nx = 6)
knitr::kable(data.frame(Time = 79:88, index = driftmeth$mean), caption = "Drift method forecast for 10 periods" )
Metrics <- rbind.data.frame(Drift = accuracy(driftmeth), Mean = accuracy(meanmethod),Naive = accuracy(naivemethod), SeasonalNaive = accuracy(seasonnaivemethod))
knitr::kable(round(Metrics,3), caption = "Accuracy metrics of benchmark models")
par(mfrow = c(2,2))
Acf(driftmeth$residuals, main = "Drift Method residuals",cex.main = 0.6)
Acf(naivemethod$residuals, main = "Naive method residuals", cex.main = 0.5)
Acf(seasonnaivemethod$residuals, main = "Seasonal Naive residuals",cex.main = 0.5)
Acf(meanmethod$residuals, main = "Mean method residuals", cex.main = 0.5)
par(mfrow = c(2,2))
stats::qqnorm(as.numeric(driftmeth$residuals), type = "p",main = "Drift method residuals")
qqline(as.numeric(driftmeth$residuals), col = "red")
stats::qqnorm(as.numeric(naivemethod$residuals), type = "p", main = "Naive method residuals")
qqline(as.numeric(naivemethod$residuals), col = "red")
stats::qqnorm(as.numeric(seasonnaivemethod$residuals), type = "p", main = "Seasonal Naive method residuals")
qqline(as.numeric(seasonnaivemethod$residuals), col = "red")
stats::qqnorm(as.numeric(meanmethod$residuals), type = "p", main = "Mean method residuals")
qqline(as.numeric(meanmethod$residuals), col = "red")
data("ibmclose")
layout(matrix(c(1,1,2),nrow = 1,ncol =3))
plot(ibmclose,ylab = "Stock Price", main = "Time series of IBM closing stock price")
hist(ibmclose,col = "grey")
train <- ts(ibmclose[1:300])
test <- ts(ibmclose[-1:-300],start = 301, end = 369)
#plot(train, ylab = "Stock Price", main = "IBM closing stock price \n Training set")
drift.fit <- rwf(y = train,drift = T,h =1)
#plot(drift.fit)
mean.fit <- meanf(train,h = 1)
naive.fit <- naive(train,h=1)
knitr::kable(rbind.data.frame(Drift = round(accuracy(drift.fit),2),Naive = round(accuracy(naive.fit),2), Mean = round(accuracy(mean.fit),2)),caption = "Forecast Accuracy")
par(mar=c(2.5,2.5,1,1))
layout(matrix(c(1,2,3,4,1,5,3,6),ncol=2),heights = c(1,3,1,3))
plot.new()
text(0.5,0.5,"Drift Residuals",cex = 1)
hist(drift.fit$residuals, xlab = "Drift residuals", main = "")
plot.new()
text(0.5,0.5,"Naive Residuals",cex = 1)
hist(naive.fit$residuals, xlab = "Naive residuals", main ="")
Acf(drift.fit$residuals, main = "")
Acf(naive.fit$residuals, main = "")
naive.generatedForecasts <- ts(sapply(1:69,function(x) naive(ibmclose[1:300+x-1], h = 1)$mean),start = 301,end = 369)
drift.generatedForecasts <- ts(sapply(1:69,function(x) rwf(ibmclose[1:300+x-1], h = 1,drift = TRUE)$mean),start = 301,end = 369)
layout(matrix(c(1,1,2,3),byrow = T, ncol =2),heights = c(3,2.5))
plot(ibmclose,col="grey",panel.first = grid(), main = "IBM Closing stock price")
lines(drift.generatedForecasts,col = "blue",lty=2)
lines(naive.generatedForecasts, col = "red",lty =3)
legend("topright", legend = c("Actual", "drift forecast", "naive forecast"),lty = c(1:3), col = c("grey","blue","red"),cex = 0.5)
plot(test - naive.generatedForecasts,ylab = "Forecast Error", main = "Naive forecast error",col = "grey")
plot(test - drift.generatedForecasts,ylab = "Forecast Error", main = "Drift forecast error", col ="grey")
data("hsales")
par(mfrow = c(2,2))
plot(hsales)
mtext("Time series plot of single family home sales in the US",adj = -3,padj = 0.5,cex = 0.8,line = 1)
seasonplot(hsales,year.labels = T,col = 1:10,main = "")
monthplot(hsales)
salesperDay <- hsales/monthdays(hsales)
plot(salesperDay)
lambda <- BoxCox.lambda(salesperDay)
#plot(BoxCox(salesperDay,lambda))
# plot(decompose(BoxCox(salesperDay,lambda),"additive"))
# plot(decompose(BoxCox(salesperDay,lambda),"multiplicative"))
training.hsales <- window(hsales,start = 1973, end = 1993-0.01)
test.hsales <- window(hsales, start = 1994,frequency = 12)
naive.fit2 <- naive(training.hsales,h=1)
snaive.fit2 <- snaive(training.hsales,h=1)
drift.fit2 <- rwf(training.hsales,h = 1, drift = T)
knitr::kable(round(rbind.data.frame(Naive = accuracy(naive.fit2), SeasonalNaive = accuracy(snaive.fit2), Drift = accuracy(drift.fit2) ),2),caption = "Accuracy statistics on training data")
training.salesPerDay <- window(salesperDay, start = 1973,end = 1993-0.01)
naive.fit3 <- naive(training.salesPerDay,h=10)
snaive.fit3 <- snaive(training.salesPerDay)
drift.fit3 <- rwf(training.salesPerDay,h = 10, drift = T)
knitr::kable(round(rbind.data.frame(Naive = accuracy(naive.fit3),
Seasonal = accuracy(snaive.fit3),
Drift = accuracy(drift.fit3)),2),caption = "Accuracy statistics on Sales per data- training data")
training.salesPerDayTrans <- BoxCox(training.salesPerDay,BoxCox.lambda(training.salesPerDay))
naive.fit4 <- naive(training.salesPerDayTrans,h=10)
snaive.fit4 <- snaive(training.salesPerDayTrans)
drift.fit4 <- rwf(training.salesPerDayTrans,h = 10, drift = T)
knitr::kable(round(rbind.data.frame(Naive = accuracy(naive.fit4),
Seasonal = accuracy(snaive.fit4),
Drift = accuracy(drift.fit4)),2), caption = "Accuracy on Transformed training data")
Naive.test.forecast <- ts(sapply(1:23,function(x) naive(hsales[1:240+x-1], h = 1)$mean),start = 1994,frequency = 12)
Drift.test.forecast <- ts(sapply(1:23,function(x) rwf(hsales[1:240+x-1], h = 1,drift = T)$mean),start = 1994,frequency = 12)
knitr::kable(round(rbind.data.frame(Naive = accuracy(Naive.test.forecast, test.hsales),
Drift = accuracy(Drift.test.forecast, test.hsales)),2),
caption = "Forecast error on test data")
test.hsalesPerMonth <- test.hsales/monthdays(test.hsales)
test.hsalesPerMonth.Naive <- ts(sapply(1:23,function(x) naive(hsales/monthdays(hsales)[1:240+x-1], h = 1)$mean),start = 1994,frequency = 12)
test.hsalesPerMonth.Drift <- ts(sapply(1:23,function(x) rwf(hsales/monthdays(hsales)[1:240+x-1], h = 1,drift = T)$mean),start = 1994,frequency = 12)
knitr::kable(round(rbind.data.frame(Naive = accuracy(test.hsalesPerMonth.Naive,test.hsalesPerMonth),
Drift = accuracy(test.hsalesPerMonth.Drift,test.hsalesPerMonth)),2),
caption = "Forecast error on test data - Sales per day per month")
library(ggplot2)
ggplot(data = econsumption, mapping = aes(x= temp, y = Mwh)) + geom_point() + geom_smooth(method = "lm")
lm.fit <- lm(Mwh ~ temp,data = econsumption)
summary(lm.fit)
par(mfrow = c(2,2))
plot(lm.fit)
forecast(lm.fit,newdata = data.frame(temp = c(10,35)))
data("olympic")
ggplot(data = olympic,mapping = aes(x = Year, y = time)) + geom_point() + geom_smooth(method = "lm")
lmfit.oly <- lm(time ~ Year, data = olympic)
summary(lmfit.oly)
par(mfrow = c(2,2))
plot(lmfit.oly)
knitr::kable(data.frame(Year = seq(2000,2012,length.out = 4),Prediction =  predict(lmfit.oly,newdata = data.frame(Year = seq(2000,2012,length.out = 4))),Actuals = c(43.84,44,43.75,43.94)),caption = "Prediction of run times")
# 2012 - 43.94
# 2008 - 43.75
# 2004 - 44
# 2000 - 43.84
data("plastics")
plot(plastics)
DecomposeMulti <- decompose(plastics, type = "multiplicative")
plot(DecomposeMulti)
SeasonallyAdj <- seasadj(DecomposeMulti)
plot(rwf(SeasonallyAdj,drift = T,h = 10))
plastics.rev <- plastics
plastics.rev[59] <- plastics.rev[59] + 500
par(mfrow = c(1,2))
plot(plastics.rev)
grid(ny = NULL, nx = 61, col = "lightgray", lty = "dotted",
lwd = par("lwd"), equilogs = TRUE)
plot(decompose(plastics.rev, type = "multiplicative"))
plastics.rev2 <- plastics
plastics.rev2[42] <- plastics.rev[42] + 500
plot(decompose(plastics.rev2, type = "multiplicative"))
plastics.rev <- plastics
plastics.rev[59] <- plastics.rev[59] + 500
par(mfrow = c(1,1))
plot(decompose(plastics.rev, type = "multiplicative"),set.pars = list())
plastics.rev2 <- plastics
plastics.rev2[42] <- plastics.rev[42] + 500
plot(decompose(plastics.rev2, type = "multiplicative"),set.pars = list())
plastics.rev <- plastics
plastics.rev[59] <- plastics.rev[59] + 500
par(mfrow = c(1,1))
plot(decompose(plastics.rev, type = "multiplicative",set.pars = list()))
plastics.rev <- plastics
plastics.rev[59] <- plastics.rev[59] + 500
par(mfrow = c(1,1))
plot(decompose(plastics.rev, type = "multiplicative"))
plastics.rev2 <- plastics
plastics.rev2[42] <- plastics.rev[42] + 500
plot(decompose(plastics.rev2, type = "multiplicative"))
plastics.rev <- plastics
plastics.rev[59] <- plastics.rev[59] + 500
par(mfrow = c(1,1))
plot(decompose(plastics.rev, type = "multiplicative"), main = "Multiplicative decomposition - Added 500 to Dec of Year 5")
plot(decompose(plastics.rev, type = "multiplicative",main = "Multiplicative decomposition - Added 500 to Dec of Year 5"))
plastics.rev
plastics
plastics.rev <- plastics
plastics.rev[59] <- plastics.rev[59] + 500
plot(decompose(plastics.rev, type = "multiplicative"))
plastics.rev2 <- plastics
plastics.rev2[42] <- plastics.rev[42] + 500
plot(decompose(plastics.rev2, type = "multiplicative"),main = "Multiplicative decomposition - Added 500 to Hun of Year 4")
plastics.rev2 <- plastics
plastics.rev2[42] <- plastics.rev[42] + 500
plot(decompose(plastics.rev2, type = "multiplicative"))
DecomposeMulti$seasonal
SeasonallyAdj <- seasadj(DecomposeMulti)
plot(rwf(SeasonallyAdj,drift = T,h = 10))
SeasonallyAdj <- seasadj(DecomposeMulti)
TrendComponent <- rwf(SeasonallyAdj,drift = T,h = 12)
plot(rwf(SeasonallyAdj,drift = T,h = 12))
SeasonalComponent <- snaive(SeasonallyAdj,h = 12)
Fcts <- SeasonalComponent$mean * TrendComponent$mean
plot(Fcts)
plot(Fcts)/1000
plot(Fcts/1000)
SeasonallyAdj <- seasadj(DecomposeMulti)
TrendComponent <- rwf(SeasonallyAdj,drift = T,h = 24)
plot(rwf(SeasonallyAdj,drift = T,h = 24))
SeasonalComponent <- snaive(SeasonallyAdj,h = 24)
Fcts <- SeasonalComponent$mean * TrendComponent$mean
plot(Fcts/1000)
randomComponent <- naive(DecomposeMulti$random, h = 24)
Fcts <- SeasonalComponent$mean * TrendComponent$mean * randomComponent$mean
plot(Fcts)
Fcts
randomComponent$mean
Fcts <- SeasonalComponent$mean * TrendComponent$mean * rep(mean(DecomposeMulti$random),24)
Fcts
Fcts <- SeasonalComponent$mean * TrendComponent$mean * rep(mean(DecomposeMulti$random,na.rm = T),24)
Fcts
rep(mean(DecomposeMulti$random,na.rm = T),24)
plot(Fcts)
plot(Fcts/1000)
SeasonallyAdj
SeasonalComponent <- snaive(DecomposeMulti$seasonal,h = 24)
randomComponent <- naive(DecomposeMulti$random, h = 24)
Fcts <- SeasonalComponent$mean * TrendComponent$mean * rep(mean(DecomposeMulti$random,na.rm = T),24)
plot(Fcts)
plot(c(plastics,Fcts))
plot(c(plastics,Fcts),type = "l",col=c(rep("grey",60),rep("blue",24)))
plot(c(plastics,Fcts),type = "b",col=c(rep("grey",60),rep("blue",24)))
SeasonalComponent <- snaive(DecomposeMulti$seasonal,h = 24)
randomComponent <- naive(DecomposeMulti$random, h = 24)
Fcts <- SeasonalComponent$mean * TrendComponent$mean * rep(mean(DecomposeMulti$random,na.rm = T),24)
plot(c(plastics,Fcts),type = "b",col=c(rep("grey",60),rep("blue",24)),main = "Rationalizing the results of multiplicative decomposition", xlab = "Year", ylab = "Units in thousands")
plot(c(plastics,Fcts),type = "b",col=c(rep("grey",60),rep("blue",24)),main = "Rationalizing the results of multiplicative decomposition", xlab = "Year", ylab = "Units in thousands")
legend("bottomright",legend = c("Actuals","Prediction"), col = c("grey","blue"),pch =1)
SeasonalComponent <- snaive(DecomposeMulti$seasonal,h = 24)
randomComponent <- naive(DecomposeMulti$random, h = 24)
Fcts <- SeasonalComponent$mean * TrendComponent$mean * rep(mean(DecomposeMulti$random,na.rm = T),24)
plot(c(plastics,Fcts),type = "b",col=c(rep("grey",60),rep("blue",24)),main = "Rationalizing the results of multiplicative decomposition", xlab = "Year", ylab = "Units in thousands")
legend("bottomright",legend = c("Actuals","Forecasts"), col = c("grey","blue"),pch =1, cex = 0.6)
knitr::opts_chunk$set(echo = TRUE,message = F, warning = F)
library(magrittr)
library(dplyr)
library(fpp)
library(forecast)
library(lubridate)
MeanTemp <- readxl::read_xlsx("mean-daily-temperature-fisher-ri-2.xlsx")
Temperature <- ts(MeanTemp$Temp,start = decimal_date(MeanTemp$Time[1]), frequency = 365)
plot(Temperature,col = "grey")
seasonplot(Temperature,cex = 0.3,col = "grey")
plot(decompose(Temperature,type = "additive"))
plot(decompose(Temperature,type = "multiplicative"))
stl.fit <- stl(x = Temperature,s.window = "periodic",t.window = 30,robust = T)
plot(stl.fit)
seasonallyAdj <- forecast::seasadj(stl.fit)
plot(snaive(seasonallyAdj), main = "Seasonal Naive on the seasonally adjusted data")
seasonalDataFit <- snaive(stl.fit$time.series[,1],h = 365*2)
seasonallyAdjFit <- snaive(seasonallyAdj, h= 365*2)
fcts <- seasonallyAdjFit$mean + seasonalDataFit$mean
plot(Temperature,col = "grey",xlim = c(1988,1994), main = "Forecast based on seasonal naive on de-seasonalized data")
lines(fcts, col = "blue")
legend("topright", legend = c("Actual", "Predicted"), col = c("grey", "blue"),cex = 0.5, lty = 1)
forecasts <- forecast::forecast(stl.fit)
plot(forecasts)
plot(forecasts,PI = F)
knitr::opts_chunk$set(echo = TRUE,message = F, warning = F)
library(magrittr)
library(dplyr)
library(fpp)
library(forecast)
library(lubridate)
MeanTemp <- readxl::read_xlsx("mean-daily-temperature-fisher-ri-2.xlsx")
Temperature <- ts(MeanTemp$Temp,start = decimal_date(MeanTemp$Time[1]), frequency = 365)
plot(Temperature,col = "grey")
seasonplot(Temperature,cex = 0.3,col = "grey")
plot(decompose(Temperature,type = "additive"))
plot(decompose(Temperature,type = "multiplicative"))
stl.fit <- stl(x = Temperature,s.window = "periodic",t.window = 30,robust = T)
plot(stl.fit)
seasonallyAdj <- forecast::seasadj(stl.fit)
plot(snaive(seasonallyAdj), main = "Seasonal Naive on the seasonally adjusted data")
seasonalDataFit <- snaive(stl.fit$time.series[,1],h = 365*2)
seasonallyAdjFit <- snaive(seasonallyAdj, h= 365*2)
fcts <- seasonallyAdjFit$mean + seasonalDataFit$mean
plot(Temperature,col = "grey",xlim = c(1988,1994), main = "Forecast based on seasonal naive on de-seasonalized data")
lines(fcts, col = "blue")
legend("topright", legend = c("Actual", "Predicted"), col = c("grey", "blue"),cex = 0.5, lty = 1)
MeanTemp
tail(MeanTemp)
tail(Temperature)
View(MeanTemp)
plot(Temperature)
plot(Temperature[1400:1461])
plot(tail(Temperature,n = 20))
plot(tail(Temperature,n = 100))
knitr::opts_chunk$set(echo = TRUE)
library(magrittr)
library(dplyr)
library(forecast)
# Training data set
dir("~/Midterm")
# Training data set
dir("/Midterm")
# Training data set
dir("/Midterm")
# Training data set
dir("./Midterm")
# Training data set
sales_train <- read.csv("./Midterm/sales_train_v2.csv", header = T, stringsAsFactors = F)
View(sales_train)
lubridate::as_date(sales_train$date[1])
lubridate::as_date(sales_train$date[1],"D.M.Y")
lubridate::parse_date_time(sales_train$date[1],orders = "DMY")
lubridate::parse_date_time(sales_train$date[1],orders = "%D.%M.%Y")
lubridate::parse_date_time(sales_train$date[1],orders = "%d.%M.%Y")
lubridate::parse_date_time(sales_train$date[1],orders = "%d.%m.%Y")
# date in Date format
sales_train %<>% dplyr::mutate(date = lubridate::parse_date_time(date,orders = "%d.%m.%Y"))
skimr::skim(sales_train)
# date in Date format
sales_train %<>% dplyr::mutate(date = lubridate::parse_date_time(date,orders = "%d.%m.%Y"),
shop_id = as.factor(shop_id),
item_id = as.factor(item_id))
skimr::skim(sales_train)
# date in Date format
sales_train %<>% dplyr::mutate(date = lubridate::parse_date_time(date,orders = "%d.%m.%Y"),
shop_id = as.factor(shop_id),
item_id = as.factor(item_id)) %>%
dplyr::arrange(shop_id,item_id,date)
# Training data set
sales_train <- read.csv("./Midterm/sales_train_v2.csv", header = T, stringsAsFactors = F)
# date in Date format
sales_train %<>% dplyr::mutate(date = lubridate::parse_date_time(date,orders = "%d.%m.%Y"),
shop_id = as.factor(shop_id),
item_id = as.factor(item_id)) %>%
dplyr::arrange(shop_id,item_id,date)
skimr::skim(sales_train)
# Training data set
sales_train <- read.csv("./Midterm/sales_train_v2.csv", header = T, stringsAsFactors = F)
# date in Date format
sales_train %<>% dplyr::mutate(date = lubridate::parse_date_time(date,orders = "%d.%m.%Y"),
shop_id = as.factor(shop_id),
item_id = as.factor(item_id),
date_block_num = as.factor(date_block_num)) %>%
dplyr::arrange(shop_id,item_id,date)
skimr::skim(sales_train)
# Training data set
sales_train <- read.csv("./Midterm/sales_train_v2.csv", header = T, stringsAsFactors = F)
# date in Date format
sales_train %<>% dplyr::mutate(date = lubridate::parse_date_time(date,orders = "%d.%m.%Y"),
shop_id = as.factor(shop_id),
item_id = as.factor(item_id),
date_block_num = as.factor(date_block_num),
Month = lubridate::month(date),
Year = lubridate::year(date),
Qtr = lubridate::quarter(date)) %>%
dplyr::arrange(shop_id,item_id,date)
skimr::skim(sales_train)
plot(sales_train$date)
plot(sales_train$date,cex = 0.2, type = "o")
# Training data set
sales_train <- read.csv("./Midterm/sales_train_v2.csv", header = T, stringsAsFactors = F)
# date in Date format
sales_train %<>% dplyr::mutate(date = lubridate::parse_date_time(date,orders = "%d.%m.%Y"),
shop_id = as.factor(shop_id),
item_id = as.factor(item_id),
date_block_num = as.factor(date_block_num),
Month = lubridate::month(date),
Year = lubridate::year(date),
Qtr = lubridate::quarter(date)) %>%
dplyr::arrange(shop_id,item_id,date)
skimr::skim(sales_train)
plot(sales_train$date,cex = 0.2, type = "o")
sales_train %>% dplyr::filter(shop_id = 1,item_id = 1) %>% lattice::xyplot(date,data = .)
sales_train %>% dplyr::filter(shop_id == 1,item_id == 1) %>% lattice::xyplot(date,data = .)
sales_train %>% dplyr::filter(shop_id == 1,item_id == 1) %>% lattice::xyplot(~date,data = .)
# Training data set
sales_train <- read.csv("./Midterm/sales_train_v2.csv", header = T, stringsAsFactors = F)
# date in Date format
sales_train %<>% dplyr::mutate(Date = lubridate::parse_date_time(date,orders = "%d.%m.%Y"),
shop_id = as.factor(shop_id),
item_id = as.factor(item_id),
date_block_num = as.factor(date_block_num),
Month = lubridate::month(date),
Year = lubridate::year(date),
Qtr = lubridate::quarter(date)) %>%
dplyr::arrange(shop_id,item_id,date)
# date in Date format
sales_train %<>% dplyr::mutate(Date = lubridate::parse_date_time(date,orders = "%d.%m.%Y"),
shop_id = as.factor(shop_id),
item_id = as.factor(item_id),
date_block_num = as.factor(date_block_num),
Month = lubridate::month(date),
Year = lubridate::year(date),
Qtr = lubridate::quarter(date)) %>%
dplyr::arrange(shop_id,item_id,Date)
# date in Date format
sales_train %<>% dplyr::mutate(Date = lubridate::parse_date_time(date,orders = "%d.%m.%Y"),
shop_id = as.factor(shop_id),
item_id = as.factor(item_id),
date_block_num = as.factor(date_block_num),
Month = lubridate::month(Date),
Year = lubridate::year(Date),
Qtr = lubridate::quarter(Date)) %>%
dplyr::arrange(shop_id,item_id,Date)
sales_train %>% dplyr::filter(shop_id == 1,item_id == 1) %>% lattice::xyplot.ts(Date,data = .)
sales_train %>% dplyr::filter(shop_id == 1,item_id == 1) %>% lattice::xyplot(Date,data = .)
sales_train %>% dplyr::filter(shop_id == 1,item_id == 1) %>% lattice::xyplot(~Date,data = .)
sales_train %>% dplyr::filter(shop_id == 1,item_id == 1) %>% lattice::xyplot.ts(x = Date,data = .)
sales_train %>% dplyr::filter(shop_id == 1,item_id == 1) %>% lattice::xyplot.ts(x = Date,data = .)
sales_train %>% dplyr::filter(shop_id == 1,item_id == 1) %>% lattice::xyplot.ts(x = ~Date,data = .)
sales_train %>% dplyr::filter(shop_id == 1,item_id == 1) %>% lattice::xyplot.ts(~Date,data = .)
sales_train %>% dplyr::filter(shop_id == 1,item_id == 1) %>% lattice::xyplot(~Date,data = .)
sales_train %>% dplyr::filter(shop_id == 1,item_id == 1) %>% lattice::xyplot(~as.numeric(Date),data = .)
sales_train %<>% dplyr::mutate(Date = lubridate::parse_date_time(date,orders = "%d.%m.%Y"),
shop_id = as.factor(shop_id),
item_id = as.factor(item_id),
date_block_num = as.factor(date_block_num),
Month = lubridate::month(Date),
Year = lubridate::year(Date),
Qtr = lubridate::quarter(Date),
ID = seq(1:nrow(.))) %>%
dplyr::arrange(shop_id,item_id,Date)
sales_train %>% dplyr::filter(shop_id == 1,item_id == 1) %>% lattice::xyplot(Date~ID, data = .)
sales_train %>% dplyr::filter(shop_id == 1,item_id == 1) %>% lattice::xyplot(as.numeric(Date)~ID, data = .)
sales_train %>% dplyr::filter(shop_id == "1",item_id == "1") %>% lattice::xyplot(as.numeric(Date)~ID, data = .)
sales_train %>% dplyr::filter(shop_id == 25,item_id == 2574) %>% lattice::xyplot(as.numeric(Date)~ID, data = .)
sales_train %>% dplyr::filter(shop_id == 25,item_id == 2574) %>% lattice::xyplot(~as.numeric(Date), data = .)
sales_train %>% dplyr::filter(shop_id == 25,item_id == 2574) %>% lattice::xyplot.ts(~as.numeric(Date), data = .)
sales_train %>% dplyr::filter(shop_id == 25,item_id == 2574) %>% lattice::xyplot.ts(as.numeric(Date), data = .)
sales_train %>% dplyr::filter(shop_id == 25,item_id == 2574) %>% lattice::xyplot(~as.numeric(Date), data = .)
sales_train %>% dplyr::filter(shop_id == 25,item_id == 2574) %>% lattice::xyplot(as.numeric(Date)~ID, data = .)
sales_train %>% dplyr::filter(shop_id == 25,item_id == 3289) %>% lattice::xyplot(as.numeric(Date)~ID, data = .)
sales_train %>% dplyr::filter(shop_id == 24,item_id == 3289) %>% lattice::xyplot(as.numeric(Date)~ID, data = .)
sales_train %>% dplyr::filter(shop_id == 24,item_id == "5") %>% lattice::xyplot(as.numeric(Date)~ID, data = .)
sales_train %>% dplyr::filter(shop_id == 24,item_id == 13890) %>% lattice::xyplot(as.numeric(Date)~ID, data = .)
skimr::skim(sales_train)
min(sales_train$Date)
max(sales_train$Date)
sales_train %>% dplyr::group_by(shop_id,item_id) %>% dplyr::summarise(Counts = n())
